// This file is generated by base_defs_parser_generator.py, do not modify it manually!

package config

import (
	"fmt"
	"gopkg.in/ini.v1"
	"gopkg.in/yaml.v2"
	"strings"
)

// ConfigData holds the parsed base config definitions
type ConfigData struct {

	// Name: Toggle action warnings
	// Description:
	//	By default Ansible will issue a warning when received from a task action (module or action plugin)
	//	These warnings can be silenced by adjusting this setting to False.
	// Version added: 2.5
	ACTION_WARNINGS bool

	// Name: Display an agnostic become prompt
	// Description:
	//	Display an agnostic become prompt instead of displaying a prompt containing the command line supplied become method
	// Version added: 2.5
	AGNOSTIC_BECOME_PROMPT bool

	// Name: Path of ansible-connection script
	// Description:
	//	Specify where to look for the ansible-connection script. This location will be checked before searching $PATH.
	//	If null, ansible will start with the same directory as the ansible script.
	// Version added: 2.8
	ANSIBLE_CONNECTION_PATH string

	// Name: Cowsay filter acceptance list
	// Description:
	//	Accept list of cowsay templates that are 'safe' to use, set to empty list if you want to enable all installed templates.
	ANSIBLE_COW_ACCEPTLIST []string

	// Name: Set path to cowsay command
	// Description:
	//	Specify a custom cowsay path or swap in your cowsay implementation of choice
	ANSIBLE_COW_PATH string

	// Name: Force color output
	// Description:
	//	This option forces color mode even when running without a TTY or the "nocolor" setting is True.
	ANSIBLE_FORCE_COLOR bool

	// Name: The Ansible home path
	// Description:
	//	The default root path for Ansible config files on the controller.
	// Version added: 2.14
	ANSIBLE_HOME string

	// Name: Suppress color output
	// Description:
	//	This setting allows suppressing colorizing output, which is used to give a better indication of failure and status information.
	ANSIBLE_NOCOLOR bool

	// Name: Suppress cowsay output
	// Description:
	//	If you have cowsay installed but want to avoid the 'cows' (why????), use this.
	ANSIBLE_NOCOWS bool

	// Name: Connection pipelining
	// Description:
	//	This is a global option, each connection plugin can override either by having more specific options or not supporting pipelining at all.
	//	Pipelining, if supported by the connection plugin, reduces the number of network operations required to execute a module on the remote server, by executing many Ansible modules without actual file transfer.
	//	It can result in a very significant performance improvement when enabled.
	//	However this conflicts with privilege escalation (become). For example, when using 'sudo:' operations you must first disable 'requiretty' in /etc/sudoers on all managed hosts, which is why it is disabled by default.
	//	This setting will be disabled if ``ANSIBLE_KEEP_REMOTE_FILES`` is enabled.
	ANSIBLE_PIPELINING bool

	// Name: Make Task failures fatal
	// Description:
	//	Sets the default value for the any_errors_fatal keyword, if True, Task failures will be considered fatal errors.
	// Version added: 2.4
	ANY_ERRORS_FATAL bool

	// Name: Allow becoming the same user
	// Description:
	//	This setting controls if become is skipped when remote user and become user are the same. I.E root sudo to root.
	//	If executable, it will be run and the resulting stdout will be used as the password.
	BECOME_ALLOW_SAME_USER bool

	// Name: Become password file
	// Description:
	//	The password file to use for the become plugin. --become-password-file.
	//	If executable, it will be run and the resulting stdout will be used as the password.
	// Version added: 2.12
	BECOME_PASSWORD_FILE string

	// Name: Become plugins path
	// Description:
	//	Colon separated paths in which Ansible will search for Become Plugins.
	// Version added: 2.8
	BECOME_PLUGIN_PATH string

	// Name: Persistent Cache plugin
	// Description:
	//	Chooses which cache plugin to use, the default 'memory' is ephemeral.
	CACHE_PLUGIN string

	// Name: Cache Plugin URI
	// Description:
	//	Defines connection or path information for the cache plugin
	CACHE_PLUGIN_CONNECTION string

	// Name: Cache Plugin table prefix
	// Description:
	//	Prefix to use for cache plugin files/tables
	CACHE_PLUGIN_PREFIX string

	// Name: Cache Plugin expiration timeout
	// Description:
	//	Expiration timeout for the cache plugin data
	CACHE_PLUGIN_TIMEOUT int

	// Name: Enable callback plugins that require it.
	// Description:
	//	List of enabled callbacks, not all callbacks need enabling, but many of those shipped with Ansible do as we don't want them activated by default.
	CALLBACKS_ENABLED []string

	// Name: Defines behavior when loading a collection that does not support the current Ansible version
	// Description:
	//	When a collection is loaded that does not support the running Ansible version (with the collection metadata key `requires_ansible`).
	COLLECTIONS_ON_ANSIBLE_VERSION_MISMATCH string

	// Name: ordered list of root paths for loading installed Ansible collections content
	// Description:
	//	Colon separated paths in which Ansible will search for collections content. Collections must be in nested *subdirectories*, not directly in these directories. For example, if ``COLLECTIONS_PATHS`` includes ``'{{ ANSIBLE_HOME ~ "/collections" }}'``, and you want to add ``my.collection`` to that directory, it must be saved as ``'{{ ANSIBLE_HOME} ~ "/collections/ansible_collections/my/collection" }}'``.

	COLLECTIONS_PATHS string

	// Name: Scan PYTHONPATH for installed collections
	// Description:
	//	A boolean to enable or disable scanning the sys.path for installed collections
	COLLECTIONS_SCAN_SYS_PATH bool

	// Name: Color for 'changed' task status
	// Description:
	//	Defines the color to use on 'Changed' task status
	COLOR_CHANGED string

	// Name: Color for ansible-console's prompt task status
	// Description:
	//	Defines the default color to use for ansible-console
	// Version added: 2.7
	COLOR_CONSOLE_PROMPT string

	// Name: Color for debug statements
	// Description:
	//	Defines the color to use when emitting debug messages
	COLOR_DEBUG string

	// Name: Color for deprecation messages
	// Description:
	//	Defines the color to use when emitting deprecation messages
	COLOR_DEPRECATE string

	// Name: Color for diff added display
	// Description:
	//	Defines the color to use when showing added lines in diffs
	COLOR_DIFF_ADD string

	// Name: Color for diff lines display
	// Description:
	//	Defines the color to use when showing diffs
	COLOR_DIFF_LINES string

	// Name: Color for diff removed display
	// Description:
	//	Defines the color to use when showing removed lines in diffs
	COLOR_DIFF_REMOVE string

	// Name: Color for error messages
	// Description:
	//	Defines the color to use when emitting error messages
	COLOR_ERROR string

	// Name: Color for highlighting
	// Description:
	//	Defines the color to use for highlighting
	COLOR_HIGHLIGHT string

	// Name: Color for 'ok' task status
	// Description:
	//	Defines the color to use when showing 'OK' task status
	COLOR_OK string

	// Name: Color for 'skip' task status
	// Description:
	//	Defines the color to use when showing 'Skipped' task status
	COLOR_SKIP string

	// Name: Color for 'unreachable' host state
	// Description:
	//	Defines the color to use on 'Unreachable' status
	COLOR_UNREACHABLE string

	// Name: Color for verbose messages
	// Description:
	//	Defines the color to use when emitting verbose messages. i.e those that show with '-v's.
	COLOR_VERBOSE string

	// Name: Color for warning messages
	// Description:
	//	Defines the color to use when emitting warning messages
	COLOR_WARN string

	// Name: Connection password file
	// Description:
	//	The password file to use for the connection plugin. --connection-password-file.
	// Version added: 2.12
	CONNECTION_PASSWORD_FILE string

	// Name: Sets the output directory and filename prefix to generate coverage run info.
	// Description:
	//	Sets the output directory on the remote host to generate coverage reports to.
	//	Currently only used for remote coverage on PowerShell modules.
	//	This is for internal use only.
	// Version added: 2.9
	COVERAGE_REMOTE_OUTPUT string

	// Name: Sets the list of paths to run coverage for.
	// Description:
	//	A list of paths for files on the Ansible controller to run coverage for when executing on the remote host.
	//	Only files that match the path glob will have its coverage collected.
	//	Multiple path globs can be specified and are separated by ``:``.
	//	Currently only used for remote coverage on PowerShell modules.
	//	This is for internal use only.
	// Version added: 2.9
	COVERAGE_REMOTE_PATHS string

	// Name: Action plugins path
	// Description:
	//	Colon separated paths in which Ansible will search for Action Plugins.
	DEFAULT_ACTION_PLUGIN_PATH string

	// Name: Allow unsafe lookups
	// Description:
	//	When enabled, this option allows lookup plugins (whether used in variables as ``{{lookup('foo')}}`` or as a loop as with_foo) to return data that is not marked 'unsafe'.
	//	By default, such data is marked as unsafe to prevent the templating engine from evaluating any jinja2 templating language, as this could represent a security risk. This option is provided to allow for backward compatibility, however users should first consider adding allow_unsafe=True to any lookups which may be expected to contain data which may be run through the templating engine late
	// Version added: 2.2.3
	DEFAULT_ALLOW_UNSAFE_LOOKUPS bool

	// Name: Ask for the login password
	// Description:
	//	This controls whether an Ansible playbook should prompt for a login password. If using SSH keys for authentication, you probably do not need to change this setting.
	DEFAULT_ASK_PASS bool

	// Name: Ask for the vault password(s)
	// Description:
	//	This controls whether an Ansible playbook should prompt for a vault password.
	DEFAULT_ASK_VAULT_PASS bool

	// Name: Enable privilege escalation (become)
	// Description:
	//	Toggles the use of privilege escalation, allowing you to 'become' another user after login.
	DEFAULT_BECOME bool

	// Name: Ask for the privilege escalation (become) password
	// Description:
	//	Toggle to prompt for privilege escalation password.
	DEFAULT_BECOME_ASK_PASS bool

	// Name: Choose 'become' executable
	// Description:
	//	executable to use for privilege escalation, otherwise Ansible will depend on PATH
	DEFAULT_BECOME_EXE string

	// Name: Set 'become' executable options
	// Description:
	//	Flags to pass to the privilege escalation executable.
	DEFAULT_BECOME_FLAGS string

	// Name: Choose privilege escalation method
	// Description:
	//	Privilege escalation method to use when `become` is enabled.
	DEFAULT_BECOME_METHOD string

	// Name: Set the user you 'become' via privilege escalation
	// Description:
	//	The user your login/remote user 'becomes' when using privilege escalation, most systems will use 'root' when no user is specified.
	DEFAULT_BECOME_USER string

	// Name: Cache Plugins Path
	// Description:
	//	Colon separated paths in which Ansible will search for Cache Plugins.
	DEFAULT_CACHE_PLUGIN_PATH string

	// Name: Callback Plugins Path
	// Description:
	//	Colon separated paths in which Ansible will search for Callback Plugins.
	DEFAULT_CALLBACK_PLUGIN_PATH string

	// Name: Cliconf Plugins Path
	// Description:
	//	Colon separated paths in which Ansible will search for Cliconf Plugins.
	DEFAULT_CLICONF_PLUGIN_PATH string

	// Name: Connection Plugins Path
	// Description:
	//	Colon separated paths in which Ansible will search for Connection Plugins.
	DEFAULT_CONNECTION_PLUGIN_PATH string

	// Name: Debug mode
	// Description:
	//	Toggles debug output in Ansible. This is *very* verbose and can hinder multiprocessing.  Debug output can also include secret information despite no_log settings being enabled, which means debug mode should not be used in production.
	DEFAULT_DEBUG bool

	// Name: Target shell executable
	// Description:
	//	This indicates the command to use to spawn a shell under for Ansible's execution needs on a target. Users may need to change this in rare instances when shell usage is constrained, but in most cases it may be left as is.
	DEFAULT_EXECUTABLE string

	// Name: local fact path
	// Description:
	//	This option allows you to globally configure a custom path for 'local_facts' for the implied :ref:`ansible_collections.ansible.builtin.setup_module` task when using fact gathering.
	//	If not set, it will fallback to the default from the ``ansible.builtin.setup`` module: ``/etc/ansible/facts.d``.
	//	This does **not** affect  user defined tasks that use the ``ansible.builtin.setup`` module.
	//	The real action being created by the implicit task is currently    ``ansible.legacy.gather_facts`` module, which then calls the configured fact modules, by default this will be ``ansible.builtin.setup`` for POSIX systems but other platforms might have different defaults.
	DEFAULT_FACT_PATH string

	// Name: Jinja2 Filter Plugins Path
	// Description:
	//	Colon separated paths in which Ansible will search for Jinja2 Filter Plugins.
	DEFAULT_FILTER_PLUGIN_PATH string

	// Name: Force handlers to run after failure
	// Description:
	//	This option controls if notified handlers run on a host even if a failure occurs on that host.
	//	When false, the handlers will not run if a failure has occurred on a host.
	//	This can also be set per play or on the command line. See Handlers and Failure for more details.
	// Version added: 1.9.1
	DEFAULT_FORCE_HANDLERS bool

	// Name: Number of task forks
	// Description:
	//	Maximum number of forks Ansible will use to execute tasks on target hosts.
	DEFAULT_FORKS int

	// Name: Gathering behaviour
	// Description:
	//	This setting controls the default policy of fact gathering (facts discovered about remote systems).
	//	This option can be useful for those wishing to save fact gathering time. Both 'smart' and 'explicit' will use the cache plugin.
	// Version added: 1.6
	DEFAULT_GATHERING string

	// Name: Gather facts subset
	// Description:
	//	Set the `gather_subset` option for the :ref:`ansible_collections.ansible.builtin.setup_module` task in the implicit fact gathering. See the module documentation for specifics.
	//	It does **not** apply to user defined ``ansible.builtin.setup`` tasks.
	// Version added: 2.1
	DEFAULT_GATHER_SUBSET []string

	// Name: Gather facts timeout
	// Description:
	//	Set the timeout in seconds for the implicit fact gathering, see the module documentation for specifics.
	//	It does **not** apply to user defined :ref:`ansible_collections.ansible.builtin.setup_module` tasks.
	DEFAULT_GATHER_TIMEOUT int

	// Name: Hash merge behaviour
	// Description:
	//	This setting controls how duplicate definitions of dictionary variables (aka hash, map, associative array) are handled in Ansible.
	//	This does not affect variables whose values are scalars (integers, strings) or arrays.
	//	**WARNING**, changing this setting is not recommended as this is fragile and makes your content (plays, roles, collections) non portable, leading to continual confusion and misuse. Don't change this setting unless you think you have an absolute need for it.
	//	We recommend avoiding reusing variable names and relying on the ``combine`` filter and ``vars`` and ``varnames`` lookups to create merged versions of the individual variables. In our experience this is rarely really needed and a sign that too much complexity has been introduced into the data structures and plays.
	//	For some uses you can also look into custom vars_plugins to merge on input, even substituting the default ``host_group_vars`` that is in charge of parsing the ``host_vars/`` and ``group_vars/`` directories. Most users of this setting are only interested in inventory scope, but the setting itself affects all sources and makes debugging even harder.
	//	All playbooks and roles in the official examples repos assume the default for this setting.
	//	Changing the setting to ``merge`` applies across variable sources, but many sources will internally still overwrite the variables. For example ``include_vars`` will dedupe variables internally before updating Ansible, with 'last defined' overwriting previous definitions in same file.
	//	The Ansible project recommends you **avoid ``merge`` for new projects.**
	//	It is the intention of the Ansible developers to eventually deprecate and remove this setting, but it is being kept as some users do heavily rely on it. New projects should **avoid 'merge'**.
	DEFAULT_HASH_BEHAVIOUR string

	// Name: Inventory Source
	// Description:
	//	Comma separated list of Ansible inventory sources
	DEFAULT_HOST_LIST string

	// Name: HttpApi Plugins Path
	// Description:
	//	Colon separated paths in which Ansible will search for HttpApi Plugins.
	DEFAULT_HTTPAPI_PLUGIN_PATH string

	// Name: Internal poll interval
	// Description:
	//	This sets the interval (in seconds) of Ansible internal processes polling each other. Lower values improve performance with large playbooks at the expense of extra CPU load. Higher values are more suitable for Ansible usage in automation scenarios, when UI responsiveness is not required but CPU usage might be a concern.
	//	The default corresponds to the value hardcoded in Ansible <= 2.1
	// Version added: 2.2
	DEFAULT_INTERNAL_POLL_INTERVAL float64

	// Name: Inventory Plugins Path
	// Description:
	//	Colon separated paths in which Ansible will search for Inventory Plugins.
	DEFAULT_INVENTORY_PLUGIN_PATH string

	// Name: Enabled Jinja2 extensions
	// Description:
	//	This is a developer-specific feature that allows enabling additional Jinja2 extensions.
	//	See the Jinja2 documentation for details. If you do not know what these do, you probably don't need to change this setting :)
	DEFAULT_JINJA2_EXTENSIONS []string

	// Name: Use Jinja2's NativeEnvironment for templating
	// Description:
	//	This option preserves variable types during template operations.
	// Version added: 2.7
	DEFAULT_JINJA2_NATIVE bool

	// Name: Keep remote files
	// Description:
	//	Enables/disables the cleaning up of the temporary files Ansible used to execute the tasks on the remote.
	//	If this option is enabled it will disable ``ANSIBLE_PIPELINING``.
	DEFAULT_KEEP_REMOTE_FILES bool

	// Name: No security label on Lxc
	// Description:
	//	This setting causes libvirt to connect to lxc containers by passing --noseclabel to virsh. This is necessary when running on systems which do not have SELinux.
	// Version added: 2.1
	DEFAULT_LIBVIRT_LXC_NOSECLABEL bool

	// Name: Load callbacks for adhoc
	// Description:
	//	Controls whether callback plugins are loaded when running /usr/bin/ansible. This may be used to log activity from the command line, send notifications, and so on. Callback plugins are always loaded for ``ansible-playbook``.
	// Version added: 1.8
	DEFAULT_LOAD_CALLBACK_PLUGINS bool

	// Name: Controller temporary directory
	// Description:
	//	Temporary directory for Ansible to use on the controller.
	DEFAULT_LOCAL_TMP string

	// Name: Name filters for python logger
	// Description:
	//	List of logger names to filter out of the log file
	DEFAULT_LOG_FILTER []string

	// Name: Ansible log file path
	// Description:
	//	File to which Ansible will log on the controller. When empty logging is disabled.
	DEFAULT_LOG_PATH string

	// Name: Lookup Plugins Path
	// Description:
	//	Colon separated paths in which Ansible will search for Lookup Plugins.
	DEFAULT_LOOKUP_PLUGIN_PATH string

	// Name: Ansible managed
	// Description:
	//	Sets the macro for the 'ansible_managed' variable available for :ref:`ansible_collections.ansible.builtin.template_module` and :ref:`ansible_collections.ansible.windows.win_template_module`.  This is only relevant for those two modules.
	DEFAULT_MANAGED_STR string

	// Name: Adhoc default arguments
	// Description:
	//	This sets the default arguments to pass to the ``ansible`` adhoc binary if no ``-a`` is specified.
	DEFAULT_MODULE_ARGS string

	// Name: Python module compression
	// Description:
	//	Compression scheme to use when transferring Python modules to the target.
	DEFAULT_MODULE_COMPRESSION string

	// Name: Default adhoc module
	// Description:
	//	Module to use with the ``ansible`` AdHoc command, if none is specified via ``-m``.
	DEFAULT_MODULE_NAME string

	// Name: Modules Path
	// Description:
	//	Colon separated paths in which Ansible will search for Modules.
	DEFAULT_MODULE_PATH string

	// Name: Module Utils Path
	// Description:
	//	Colon separated paths in which Ansible will search for Module utils files, which are shared by modules.
	DEFAULT_MODULE_UTILS_PATH string

	// Name: Netconf Plugins Path
	// Description:
	//	Colon separated paths in which Ansible will search for Netconf Plugins.
	DEFAULT_NETCONF_PLUGIN_PATH string

	// Name: No log
	// Description:
	//	Toggle Ansible's display and logging of task details, mainly used to avoid security disclosures.
	DEFAULT_NO_LOG bool

	// Name: No syslog on target
	// Description:
	//	Toggle Ansible logging to syslog on the target when it executes tasks. On Windows hosts this will disable a newer style PowerShell modules from writting to the event log.
	DEFAULT_NO_TARGET_SYSLOG bool

	// Name: Represent a null
	// Description:
	//	What templating should return as a 'null' value. When not set it will let Jinja2 decide.
	DEFAULT_NULL_REPRESENTATION string

	// Name: Async poll interval
	// Description:
	//	For asynchronous tasks in Ansible (covered in Asynchronous Actions and Polling), this is how often to check back on the status of those tasks when an explicit poll interval is not supplied. The default is a reasonably moderate 15 seconds which is a tradeoff between checking in frequently and providing a quick turnaround when something may have completed.
	DEFAULT_POLL_INTERVAL int

	// Name: Private key file
	// Description:
	//	Option for connections using a certificate or key file to authenticate, rather than an agent or passwords, you can set the default value here to avoid re-specifying --private-key with every invocation.
	DEFAULT_PRIVATE_KEY_FILE string

	// Name: Private role variables
	// Description:
	//	Makes role variables inaccessible from other roles.
	//	This was introduced as a way to reset role variables to default values if a role is used more than once in a playbook.
	DEFAULT_PRIVATE_ROLE_VARS bool

	// Name: Remote port
	// Description:
	//	Port to use in remote connections, when blank it will use the connection plugin default.
	DEFAULT_REMOTE_PORT int

	// Name: Login/Remote User
	// Description:
	//	Sets the login user for the target machines
	//	When blank it uses the connection plugin's default, normally the user currently executing Ansible.
	DEFAULT_REMOTE_USER string

	// Name: Roles path
	// Description:
	//	Colon separated paths in which Ansible will search for Roles.
	DEFAULT_ROLES_PATH string

	// Name: Problematic file systems
	// Description:
	//	Some filesystems do not support safe operations and/or return inconsistent errors, this setting makes Ansible 'tolerate' those in the list w/o causing fatal errors.
	//	Data corruption may occur and writes are not always verified when a filesystem is in the list.
	DEFAULT_SELINUX_SPECIAL_FS []string

	// Name: Main display callback plugin
	// Description:
	//	Set the main callback used to display Ansible output. You can only have one at a time.
	//	You can have many other callbacks, but just one can be in charge of stdout.
	//	See :ref:`callback_plugins` for a list of available options.
	DEFAULT_STDOUT_CALLBACK string

	// Name: Implied strategy
	// Description:
	//	Set the default strategy used for plays.
	// Version added: 2.3
	DEFAULT_STRATEGY string

	// Name: Strategy Plugins Path
	// Description:
	//	Colon separated paths in which Ansible will search for Strategy Plugins.
	DEFAULT_STRATEGY_PLUGIN_PATH string

	// Description:
	//	Toggle the use of "su" for tasks.
	DEFAULT_SU bool

	// Name: syslog facility
	// Description:
	//	Syslog facility to use when Ansible logs to the remote target
	DEFAULT_SYSLOG_FACILITY string

	// Name: Terminal Plugins Path
	// Description:
	//	Colon separated paths in which Ansible will search for Terminal Plugins.
	DEFAULT_TERMINAL_PLUGIN_PATH string

	// Name: Jinja2 Test Plugins Path
	// Description:
	//	Colon separated paths in which Ansible will search for Jinja2 Test Plugins.
	DEFAULT_TEST_PLUGIN_PATH string

	// Name: Connection timeout
	// Description:
	//	This is the default timeout for connection plugins to use.
	DEFAULT_TIMEOUT int

	// Name: Connection plugin
	// Description:
	//	Default connection plugin to use, the 'smart' option will toggle between 'ssh' and 'paramiko' depending on controller OS and ssh versions
	DEFAULT_TRANSPORT string

	// Name: Jinja2 fail on undefined
	// Description:
	//	When True, this causes ansible templating to fail steps that reference variable names that are likely typoed.
	//	Otherwise, any '{{ template_expression }}' that contains undefined variables will be rendered in a template or ansible action line exactly as written.
	// Version added: 1.3
	DEFAULT_UNDEFINED_VAR_BEHAVIOR bool

	// Name: Vars Plugins Path
	// Description:
	//	Colon separated paths in which Ansible will search for Vars Plugins.
	DEFAULT_VARS_PLUGIN_PATH string

	// Name: Vault id to use for encryption
	// Description:
	//	The vault_id to use for encrypting by default. If multiple vault_ids are provided, this specifies which to use for encryption. The --encrypt-vault-id cli option overrides the configured value.
	DEFAULT_VAULT_ENCRYPT_IDENTITY string

	// Name: Vault id label
	// Description:
	//	The label to use for the default vault id label in cases where a vault id label is not provided
	DEFAULT_VAULT_IDENTITY string

	// Name: Default vault ids
	// Description:
	//	A list of vault-ids to use by default. Equivalent to multiple --vault-id args. Vault-ids are tried in order.
	DEFAULT_VAULT_IDENTITY_LIST []string

	// Name: Force vault id match
	// Description:
	//	If true, decrypting vaults with a vault id will only try the password from the matching vault-id
	DEFAULT_VAULT_ID_MATCH bool

	// Name: Vault password file
	// Description:
	//	The vault password file to use. Equivalent to --vault-password-file or --vault-id
	//	If executable, it will be run and the resulting stdout will be used as the password.
	DEFAULT_VAULT_PASSWORD_FILE string

	// Name: Verbosity
	// Description:
	//	Sets the default verbosity, equivalent to the number of ``-v`` passed in the command line.
	DEFAULT_VERBOSITY int

	// Name: Deprecation messages
	// Description:
	//	Toggle to control the showing of deprecation warnings
	DEPRECATION_WARNINGS bool

	// Name: Running devel warning
	// Description:
	//	Toggle to control showing warnings related to running devel
	DEVEL_WARNING bool

	// Name: Show differences
	// Description:
	//	Configuration toggle to tell modules to show differences when in 'changed' status, equivalent to ``--diff``.
	DIFF_ALWAYS bool

	// Name: Difference context
	// Description:
	//	How many lines of context to show when displaying the differences between files.
	DIFF_CONTEXT int

	// Name: Show task arguments
	// Description:
	//	Normally ``ansible-playbook`` will print a header for each task that is run. These headers will contain the name: field from the task if you specified one. If you didn't then ``ansible-playbook`` uses the task's action to help you tell which task is presently running. Sometimes you run many of the same action and so you want more information about the task to differentiate it from others of the same action. If you set this variable to True in the config then ``ansible-playbook`` will also include the task's arguments in the header.
	//	This setting defaults to False because there is a chance that you have sensitive values in your parameters and you do not want those to be printed.
	//	If you set this to True you should be sure that you have secured your environment's stdout (no one can shoulder surf your screen and you aren't saving stdout to an insecure file) or made sure that all of your playbooks explicitly added the ``no_log: True`` parameter to tasks which have sensitive values See How do I keep secret data in my playbook? for more information.
	// Version added: 2.1
	DISPLAY_ARGS_TO_STDOUT bool

	// Name: Show skipped results
	// Description:
	//	Toggle to control displaying skipped task/host entries in a task in the default callback
	DISPLAY_SKIPPED_HOSTS bool

	// Name: Root docsite URL
	// Description:
	//	Root docsite URL used to generate docs URLs in warning/error text; must be an absolute URL with valid scheme and trailing slash.
	// Version added: 2.8
	DOCSITE_ROOT_URL string

	// Name: documentation fragment plugins path
	// Description:
	//	Colon separated paths in which Ansible will search for Documentation Fragments Plugins.
	DOC_FRAGMENT_PLUGIN_PATH string

	// Name: Controls ansible behaviour when finding duplicate keys in YAML.
	// Description:
	//	By default Ansible will issue a warning when a duplicate dict key is encountered in YAML.
	//	These warnings can be silenced by adjusting this setting to False.
	// Version added: 2.9
	DUPLICATE_YAML_DICT_KEY string

	// Name: Whether to enable the task debugger
	// Description:
	//	Whether or not to enable the task debugger, this previously was done as a strategy plugin.
	//	Now all strategy plugins can inherit this behavior. The debugger defaults to activating when
	//	a task is failed on unreachable. Use the debugger keyword for more flexibility.
	// Version added: 2.5
	ENABLE_TASK_DEBUGGER bool

	// Name: Missing handler error
	// Description:
	//	Toggle to allow missing handlers to become a warning instead of an error when notifying.
	ERROR_ON_MISSING_HANDLER bool

	// Name: Gather Facts Modules
	// Description:
	//	Which modules to run during a play's fact gathering stage, using the default of 'smart' will try to figure it out based on connection type.
	FACTS_MODULES []string

	// Description:
	//	The directory that stores cached responses from a Galaxy server.
	//	This is only used by the ``ansible-galaxy collection install`` and ``download`` commands.
	//	Cache files inside this dir will be ignored if they are world writable.
	// Version added: 2.11
	GALAXY_CACHE_DIR string

	// Name: Galaxy collection skeleton directory
	// Description:
	//	Collection skeleton directory to use as a template for the ``init`` action in ``ansible-galaxy collection``, same as ``--collection-skeleton``.
	GALAXY_COLLECTION_SKELETON string

	// Name: Galaxy collection skeleton ignore
	// Description:
	//	patterns of files to ignore inside a Galaxy collection skeleton directory
	GALAXY_COLLECTION_SKELETON_IGNORE []string

	// Description:
	//	Disable GPG signature verification during collection installation.
	// Version added: 2.13
	GALAXY_DISABLE_GPG_VERIFY bool

	// Description:
	//	Some steps in ``ansible-galaxy`` display a progress wheel which can cause issues on certain displays or when outputing the stdout to a file.
	//	This config option controls whether the display wheel is shown or not.
	//	The default is to show the display wheel if stdout has a tty.
	// Version added: 2.10
	GALAXY_DISPLAY_PROGRESS bool

	// Description:
	//	Configure the keyring used for GPG signature verification during collection installation and verification.
	// Version added: 2.13
	GALAXY_GPG_KEYRING string

	// Name: Galaxy validate certs
	// Description:
	//	If set to yes, ansible-galaxy will not validate TLS certificates. This can be useful for testing against a server with a self-signed certificate.
	GALAXY_IGNORE_CERTS bool

	// Description:
	//	A list of GPG status codes to ignore during GPG signature verfication. See L(https://github.com/gpg/gnupg/blob/master/doc/DETAILS#general-status-codes) for status code descriptions.
	//	If fewer signatures successfully verify the collection than `GALAXY_REQUIRED_VALID_SIGNATURE_COUNT`, signature verification will fail even if all error codes are ignored.
	GALAXY_IGNORE_INVALID_SIGNATURE_STATUS_CODES []string

	// Name: Galaxy role skeleton directory
	// Description:
	//	Role skeleton directory to use as a template for the ``init`` action in ``ansible-galaxy``/``ansible-galaxy role``, same as ``--role-skeleton``.
	GALAXY_ROLE_SKELETON string

	// Name: Galaxy role skeleton ignore
	// Description:
	//	patterns of files to ignore inside a Galaxy role or collection skeleton directory
	GALAXY_ROLE_SKELETON_IGNORE []string

	// Description:
	//	URL to prepend when roles don't specify the full URI, assume they are referencing this server as the source.
	GALAXY_SERVER string

	// Description:
	//	A list of Galaxy servers to use when installing a collection.
	//	The value corresponds to the config ini header ``[galaxy_server.{{item}}]`` which defines the server details.
	//	See :ref:`galaxy_server_config` for more details on how to define a Galaxy server.
	//	The order of servers in this list is used to as the order in which a collection is resolved.
	//	Setting this config option will ignore the :ref:`galaxy_server` config option.
	// Version added: 2.9
	GALAXY_SERVER_LIST []string

	// Description:
	//	Local path to galaxy access token file
	// Version added: 2.9
	GALAXY_TOKEN_PATH string

	// Name: Check host keys
	// Description:
	//	Set this to "False" if you want to avoid host key checking by the underlying tools Ansible uses to connect to the host
	HOST_KEY_CHECKING bool

	// Name: Control host pattern mismatch behaviour
	// Description:
	//	This setting changes the behaviour of mismatched host patterns, it allows you to force a fatal error, a warning or just ignore it
	// Version added: 2.8
	HOST_PATTERN_MISMATCH string

	// Description:
	//	Facts are available inside the `ansible_facts` variable, this setting also pushes them as their own vars in the main namespace.
	//	Unlike inside the `ansible_facts` dictionary, these will have an `ansible_` prefix.
	// Version added: 2.5
	INJECT_FACTS_AS_VARS bool

	// Name: Python interpreter path (or automatic discovery behavior) used for module execution
	// Description:
	//	Path to the Python interpreter to be used for module execution on remote targets, or an automatic discovery mode. Supported discovery modes are ``auto`` (the default), ``auto_silent``, ``auto_legacy``, and ``auto_legacy_silent``. All discovery modes employ a lookup table to use the included system Python (on distributions known to include one), falling back to a fixed ordered list of well-known Python interpreter locations if a platform-specific default is not available. The fallback behavior will issue a warning that the interpreter should be set explicitly (since interpreters installed later may change which one is used). This warning behavior can be disabled by setting ``auto_silent`` or ``auto_legacy_silent``. The value of ``auto_legacy`` provides all the same behavior, but for backwards-compatibility with older Ansible releases that always defaulted to ``/usr/bin/python``, will use that interpreter if present.
	// Version added: 2.8
	INTERPRETER_PYTHON string

	// Name: Ordered list of Python interpreters to check for in discovery
	// Version added: 2.8
	INTERPRETER_PYTHON_FALLBACK []string

	// Name: Controls whether invalid attributes for a task result in errors instead of warnings
	// Description:
	//	If 'false', invalid attributes for a task will result in warnings instead of errors
	// Version added: 2.7
	INVALID_TASK_ATTRIBUTE_FAILED bool

	// Name: Controls whether any unparseable inventory source is a fatal error
	// Description:
	//	If 'true', it is a fatal error when any given inventory source cannot be successfully parsed by any available inventory plugin; otherwise, this situation only attracts a warning.

	// Version added: 2.7
	INVENTORY_ANY_UNPARSED_IS_FAILED bool

	// Name: Inventory caching enabled
	// Description:
	//	Toggle to turn on inventory caching.
	//	This setting has been moved to the individual inventory plugins as a plugin option :ref:`inventory_plugins`.
	//	The existing configuration settings are still accepted with the inventory plugin adding additional options from inventory configuration.
	//	This message will be removed in 2.16.
	INVENTORY_CACHE_ENABLED bool

	// Name: Inventory cache plugin
	// Description:
	//	The plugin for caching inventory.
	//	This setting has been moved to the individual inventory plugins as a plugin option :ref:`inventory_plugins`.
	//	The existing configuration settings are still accepted with the inventory plugin adding additional options from inventory and fact cache configuration.
	//	This message will be removed in 2.16.
	INVENTORY_CACHE_PLUGIN string

	// Name: Inventory cache plugin URI to override the defaults section
	// Description:
	//	The inventory cache connection.
	//	This setting has been moved to the individual inventory plugins as a plugin option :ref:`inventory_plugins`.
	//	The existing configuration settings are still accepted with the inventory plugin adding additional options from inventory and fact cache configuration.
	//	This message will be removed in 2.16.
	INVENTORY_CACHE_PLUGIN_CONNECTION string

	// Name: Inventory cache plugin table prefix
	// Description:
	//	The table prefix for the cache plugin.
	//	This setting has been moved to the individual inventory plugins as a plugin option :ref:`inventory_plugins`.
	//	The existing configuration settings are still accepted with the inventory plugin adding additional options from inventory and fact cache configuration.
	//	This message will be removed in 2.16.
	INVENTORY_CACHE_PLUGIN_PREFIX string

	// Name: Inventory cache plugin expiration timeout
	// Description:
	//	Expiration timeout for the inventory cache plugin data.
	//	This setting has been moved to the individual inventory plugins as a plugin option :ref:`inventory_plugins`.
	//	The existing configuration settings are still accepted with the inventory plugin adding additional options from inventory and fact cache configuration.
	//	This message will be removed in 2.16.
	INVENTORY_CACHE_TIMEOUT int

	// Name: Active Inventory plugins
	// Description:
	//	List of enabled inventory plugins, it also determines the order in which they are used.
	INVENTORY_ENABLED []string

	// Name: Set ansible-inventory into export mode
	// Description:
	//	Controls if ansible-inventory will accurately reflect Ansible's view into inventory or its optimized for exporting.
	INVENTORY_EXPORT bool

	// Name: Inventory ignore patterns
	// Description:
	//	List of patterns to ignore when using a directory as an inventory source
	INVENTORY_IGNORE_PATTERNS []string

	// Name: Unparsed Inventory failure
	// Description:
	//	If 'true' it is a fatal error if every single potential inventory source fails to parse, otherwise this situation will only attract a warning.

	INVENTORY_UNPARSED_IS_FAILED bool

	// Name: Warning when no inventory files can be parsed, resulting in an implicit inventory with only localhost
	// Description:
	//	By default Ansible will issue a warning when no inventory was loaded and notes that it will use an implicit localhost-only inventory.
	//	These warnings can be silenced by adjusting this setting to False.
	// Version added: 2.14
	INVENTORY_UNPARSED_WARNING bool

	// Name: Running older than required Jinja version for jinja2_native warning
	// Description:
	//	Toggle to control showing warnings related to running a Jinja version older than required for jinja2_native
	JINJA2_NATIVE_WARNING bool

	// Name: Warning when using implicit inventory with only localhost
	// Description:
	//	By default Ansible will issue a warning when there are no hosts in the inventory.
	//	These warnings can be silenced by adjusting this setting to False.
	// Version added: 2.6
	LOCALHOST_WARNING bool

	// Name: Diff maximum file size
	// Description:
	//	Maximum size of files to be considered for diff display
	MAX_FILE_SIZE_FOR_DIFF int

	// Description:
	//	This variable is used to enable bastion/jump host with netconf connection. If set to True the bastion/jump host ssh settings should be present in ~/.ssh/config file, alternatively it can be set to custom ssh configuration file path to read the bastion/jump host settings.
	NETCONF_SSH_CONFIG string

	// Name: Network module families
	NETWORK_GROUP_MODULES []string

	// Description:
	//	Previously Ansible would only clear some of the plugin loading caches when loading new roles, this led to some behaviours in which a plugin loaded in prevoius plays would be unexpectedly 'sticky'. This setting allows to return to that behaviour.
	// Version added: 2.8
	OLD_PLUGIN_CACHE_CLEARING bool

	PARAMIKO_HOST_KEY_AUTO_ADD bool

	// Name: look for keys
	PARAMIKO_LOOK_FOR_KEYS bool

	// Name: Persistence command timeout
	// Description:
	//	This controls the amount of time to wait for response from remote device before timing out persistent connection.
	PERSISTENT_COMMAND_TIMEOUT int

	// Name: Persistence connection retry timeout
	// Description:
	//	This controls the retry timeout for persistent connection to connect to the local domain socket.
	PERSISTENT_CONNECT_RETRY_TIMEOUT int

	// Name: Persistence timeout
	// Description:
	//	This controls how long the persistent connection will remain idle before it is destroyed.
	PERSISTENT_CONNECT_TIMEOUT int

	// Name: Persistence socket path
	// Description:
	//	Path to socket to be used by the connection persistence system.
	PERSISTENT_CONTROL_PATH_DIR string

	// Name: playbook dir override for non-playbook CLIs (ala --playbook-dir)
	// Description:
	//	A number of non-playbook CLIs have a ``--playbook-dir`` argument; this sets the default value for it.
	// Version added: 2.9
	PLAYBOOK_DIR string

	// Name: playbook vars files root
	// Description:
	//	This sets which playbook dirs will be used as a root to process vars plugins, which includes finding host_vars/group_vars
	// Version added: 2.4.1
	PLAYBOOK_VARS_ROOT string

	// Name: Adjust maximum file descriptor soft limit during Python module execution
	// Description:
	//	Attempts to set RLIMIT_NOFILE soft limit to the specified value when executing Python modules (can speed up subprocess usage on Python 2.x. See https://bugs.python.org/issue11284). The value will be limited by the existing hard limit. Default value of 0 does not attempt to adjust existing system-defined limits.
	// Version added: 2.8
	PYTHON_MODULE_RLIMIT_NOFILE int

	// Name: Retry files
	// Description:
	//	This controls whether a failed Ansible playbook should create a .retry file.
	RETRY_FILES_ENABLED bool

	// Name: Retry files path
	// Description:
	//	This sets the path in which Ansible will save .retry files when a playbook fails and retry files are enabled.
	//	This file will be overwritten after each run with the list of failed hosts from all plays.
	RETRY_FILES_SAVE_PATH string

	// Name: When should vars plugins run relative to inventory
	// Description:
	//	This setting can be used to optimize vars_plugin usage depending on user's inventory size and play selection.
	// Version added: 2.10
	RUN_VARS_PLUGINS string

	// Name: Display custom stats
	// Description:
	//	This adds the custom stats set via the set_stats plugin to the default output
	SHOW_CUSTOM_STATS bool

	// Description:
	//	Action to take when a module parameter value is converted to a string (this does not affect variables). For string parameters, values such as '1.00', "['a', 'b',]", and 'yes', 'y', etc. will be converted by the YAML parser unless fully quoted.
	//	Valid options are 'error', 'warn', and 'ignore'.
	//	Since 2.8, this option defaults to 'warn' but will change to 'error' in 2.12.
	// Version added: 2.8
	STRING_CONVERSION_ACTION string

	// Name: Filters to preserve strings
	// Description:
	//	This list of filters avoids 'type conversion' when templating variables
	//	Useful when you want to avoid conversion into lists or dictionaries for JSON strings, for example.
	STRING_TYPE_FILTERS []string

	// Name: System warnings
	// Description:
	//	Allows disabling of warnings related to potential issues on the system running ansible itself (not on the managed hosts)
	//	These may include warnings about 3rd party packages or other conditions that should be resolved if possible.
	SYSTEM_WARNINGS bool

	// Name: Run Tags
	// Description:
	//	default list of tags to run in your plays, Skip Tags has precedence.
	// Version added: 2.5
	TAGS_RUN []string

	// Name: Skip Tags
	// Description:
	//	default list of tags to skip in your plays, has precedence over Run Tags
	// Version added: 2.5
	TAGS_SKIP []string

	// Name: Whether a failed task with ignore_errors=True will still invoke the debugger
	// Description:
	//	This option defines whether the task debugger will be invoked on a failed task when ignore_errors=True is specified.
	//	True specifies that the debugger will honor ignore_errors, False will not honor ignore_errors.
	// Version added: 2.7
	TASK_DEBUGGER_IGNORE_ERRORS bool

	// Name: Task Timeout
	// Description:
	//	Set the maximum time (in seconds) that a task can run for.
	//	If set to 0 (the default) there is no timeout.
	// Version added: 2.10
	TASK_TIMEOUT int

	// Name: Transform invalid characters in group names
	// Description:
	//	Make ansible transform invalid characters in group names supplied by inventory sources.
	// Version added: 2.8
	TRANSFORM_INVALID_GROUP_CHARS string

	// Name: Persistence
	// Description:
	//	Toggles the use of persistence for connections.
	USE_PERSISTENT_CONNECTIONS bool

	// Description:
	//	A toggle to disable validating a collection's 'metadata' entry for a module_defaults action group. Metadata containing unexpected fields or value types will produce a warning when this is True.
	// Version added: 2.12
	VALIDATE_ACTION_GROUP_METADATA bool

	// Name: Vars plugin enabled list
	// Description:
	//	Accept list for variable plugins that require it.
	// Version added: 2.10
	VARIABLE_PLUGINS_ENABLED []string

	// Name: Group variable precedence
	// Description:
	//	Allows to change the group variable precedence merge order.
	// Version added: 2.4
	VARIABLE_PRECEDENCE []string

	// Description:
	//	Force 'verbose' option to use stderr instead of stdout
	// Version added: 2.8
	VERBOSE_TO_STDERR bool

	// Name: Windows Async Startup Timeout
	// Description:
	//	For asynchronous tasks in Ansible (covered in Asynchronous Actions and Polling), this is how long, in seconds, to wait for the task spawned by Ansible to connect back to the named pipe used on Windows systems. The default is 5 seconds. This can be too low on slower systems, or systems under heavy load.
	//	This is not the total time an async command can run for, but is a separate timeout to wait for an async command to start. The task will only start to be timed against its async_timeout once it has connected to the pipe, so the overall maximum duration the task can take will be extended by the amount specified here.
	// Version added: 2.10
	WIN_ASYNC_STARTUP_TIMEOUT int

	// Name: Worker Shutdown Poll Count
	// Description:
	//	The maximum number of times to check Task Queue Manager worker processes to verify they have exited cleanly.
	//	After this limit is reached any worker processes still running will be terminated.
	//	This is for internal use only.
	// Version added: 2.10
	WORKER_SHUTDOWN_POLL_COUNT int

	// Name: Worker Shutdown Poll Delay
	// Description:
	//	The number of seconds to sleep between polling loops when checking Task Queue Manager worker processes to verify they have exited cleanly.
	//	This is for internal use only.
	// Version added: 2.10
	WORKER_SHUTDOWN_POLL_DELAY float64

	// Name: Valid YAML extensions
	// Description:
	//	Check all of these extensions when looking for 'variable' files which should be YAML or JSON or vaulted versions of these.
	//	This affects vars_files, include_vars, inventory and vars plugins among others.
	YAML_FILENAME_EXTENSIONS []string

	// Name: placeholder for color settings' defaults
	_COLOR_DEFAULTS []string
}

// ParseBaseDefsConfigData parses the base config definitions from a yaml file
func ParseBaseDefsConfigData(fileContents []byte) (*ConfigData, error) {
	var data map[string]map[string]interface{}
	err := yaml.Unmarshal(fileContents, &data)
	if err != nil {
		return nil, err
	}

	var configData ConfigData
	for key, value := range data {
		err := parseField(&configData, key, value)
		if err != nil {
			return nil, err
		}
	}

	return &configData, nil
}

func parseField(data *ConfigData, key string, value map[string]interface{}) error {
	defaultValue, ok := value["default"]
	if !ok {
		defaultValue, ok = value["choices"]
		if !ok {
			// No default or choices, so we can't parse this, but it's not an error.
			return nil
		}
	}

	if defaultValue == nil {
		// Not an error, but the parsing logic below doesn't handle nil values.
		return nil
	}

	switch key {

	case "ACTION_WARNINGS":
		data.ACTION_WARNINGS, ok = defaultValue.(bool)
	case "AGNOSTIC_BECOME_PROMPT":
		data.AGNOSTIC_BECOME_PROMPT, ok = defaultValue.(bool)
	case "ANSIBLE_CONNECTION_PATH":
		data.ANSIBLE_CONNECTION_PATH, ok = defaultValue.(string)
	case "ANSIBLE_COW_ACCEPTLIST":
		switch v := defaultValue.(type) {
		case []string:
			data.ANSIBLE_COW_ACCEPTLIST = v
		case []interface{}:
			data.ANSIBLE_COW_ACCEPTLIST = []string{}
			for _, value := range v {
				switch value.(type) {
				case string:
					data.ANSIBLE_COW_ACCEPTLIST = append(data.ANSIBLE_COW_ACCEPTLIST, value.(string))
				default:
					ok = false
					break
				}
			}
		case string:
			data.ANSIBLE_COW_ACCEPTLIST = strings.Split(v, ", ")
		default:
			ok = false
		}

	case "ANSIBLE_COW_PATH":
		data.ANSIBLE_COW_PATH, ok = defaultValue.(string)
	case "ANSIBLE_FORCE_COLOR":
		data.ANSIBLE_FORCE_COLOR, ok = defaultValue.(bool)
	case "ANSIBLE_HOME":
		data.ANSIBLE_HOME, ok = defaultValue.(string)
	case "ANSIBLE_NOCOLOR":
		data.ANSIBLE_NOCOLOR, ok = defaultValue.(bool)
	case "ANSIBLE_NOCOWS":
		data.ANSIBLE_NOCOWS, ok = defaultValue.(bool)
	case "ANSIBLE_PIPELINING":
		data.ANSIBLE_PIPELINING, ok = defaultValue.(bool)
	case "ANY_ERRORS_FATAL":
		data.ANY_ERRORS_FATAL, ok = defaultValue.(bool)
	case "BECOME_ALLOW_SAME_USER":
		data.BECOME_ALLOW_SAME_USER, ok = defaultValue.(bool)
	case "BECOME_PASSWORD_FILE":
		data.BECOME_PASSWORD_FILE, ok = defaultValue.(string)
	case "BECOME_PLUGIN_PATH":
		data.BECOME_PLUGIN_PATH, ok = defaultValue.(string)
	case "CACHE_PLUGIN":
		data.CACHE_PLUGIN, ok = defaultValue.(string)
	case "CACHE_PLUGIN_CONNECTION":
		data.CACHE_PLUGIN_CONNECTION, ok = defaultValue.(string)
	case "CACHE_PLUGIN_PREFIX":
		data.CACHE_PLUGIN_PREFIX, ok = defaultValue.(string)
	case "CACHE_PLUGIN_TIMEOUT":
		data.CACHE_PLUGIN_TIMEOUT, ok = defaultValue.(int)
	case "CALLBACKS_ENABLED":
		switch v := defaultValue.(type) {
		case []string:
			data.CALLBACKS_ENABLED = v
		case []interface{}:
			data.CALLBACKS_ENABLED = []string{}
			for _, value := range v {
				switch value.(type) {
				case string:
					data.CALLBACKS_ENABLED = append(data.CALLBACKS_ENABLED, value.(string))
				default:
					ok = false
					break
				}
			}
		case string:
			data.CALLBACKS_ENABLED = strings.Split(v, ", ")
		default:
			ok = false
		}

	case "COLLECTIONS_ON_ANSIBLE_VERSION_MISMATCH":
		data.COLLECTIONS_ON_ANSIBLE_VERSION_MISMATCH, ok = defaultValue.(string)
	case "COLLECTIONS_PATHS":
		data.COLLECTIONS_PATHS, ok = defaultValue.(string)
	case "COLLECTIONS_SCAN_SYS_PATH":
		data.COLLECTIONS_SCAN_SYS_PATH, ok = defaultValue.(bool)
	case "COLOR_CHANGED":
		data.COLOR_CHANGED, ok = defaultValue.(string)
	case "COLOR_CONSOLE_PROMPT":
		data.COLOR_CONSOLE_PROMPT, ok = defaultValue.(string)
	case "COLOR_DEBUG":
		data.COLOR_DEBUG, ok = defaultValue.(string)
	case "COLOR_DEPRECATE":
		data.COLOR_DEPRECATE, ok = defaultValue.(string)
	case "COLOR_DIFF_ADD":
		data.COLOR_DIFF_ADD, ok = defaultValue.(string)
	case "COLOR_DIFF_LINES":
		data.COLOR_DIFF_LINES, ok = defaultValue.(string)
	case "COLOR_DIFF_REMOVE":
		data.COLOR_DIFF_REMOVE, ok = defaultValue.(string)
	case "COLOR_ERROR":
		data.COLOR_ERROR, ok = defaultValue.(string)
	case "COLOR_HIGHLIGHT":
		data.COLOR_HIGHLIGHT, ok = defaultValue.(string)
	case "COLOR_OK":
		data.COLOR_OK, ok = defaultValue.(string)
	case "COLOR_SKIP":
		data.COLOR_SKIP, ok = defaultValue.(string)
	case "COLOR_UNREACHABLE":
		data.COLOR_UNREACHABLE, ok = defaultValue.(string)
	case "COLOR_VERBOSE":
		data.COLOR_VERBOSE, ok = defaultValue.(string)
	case "COLOR_WARN":
		data.COLOR_WARN, ok = defaultValue.(string)
	case "CONNECTION_PASSWORD_FILE":
		data.CONNECTION_PASSWORD_FILE, ok = defaultValue.(string)
	case "COVERAGE_REMOTE_OUTPUT":
		data.COVERAGE_REMOTE_OUTPUT, ok = defaultValue.(string)
	case "COVERAGE_REMOTE_PATHS":
		data.COVERAGE_REMOTE_PATHS, ok = defaultValue.(string)
	case "DEFAULT_ACTION_PLUGIN_PATH":
		data.DEFAULT_ACTION_PLUGIN_PATH, ok = defaultValue.(string)
	case "DEFAULT_ALLOW_UNSAFE_LOOKUPS":
		data.DEFAULT_ALLOW_UNSAFE_LOOKUPS, ok = defaultValue.(bool)
	case "DEFAULT_ASK_PASS":
		data.DEFAULT_ASK_PASS, ok = defaultValue.(bool)
	case "DEFAULT_ASK_VAULT_PASS":
		data.DEFAULT_ASK_VAULT_PASS, ok = defaultValue.(bool)
	case "DEFAULT_BECOME":
		data.DEFAULT_BECOME, ok = defaultValue.(bool)
	case "DEFAULT_BECOME_ASK_PASS":
		data.DEFAULT_BECOME_ASK_PASS, ok = defaultValue.(bool)
	case "DEFAULT_BECOME_EXE":
		data.DEFAULT_BECOME_EXE, ok = defaultValue.(string)
	case "DEFAULT_BECOME_FLAGS":
		data.DEFAULT_BECOME_FLAGS, ok = defaultValue.(string)
	case "DEFAULT_BECOME_METHOD":
		data.DEFAULT_BECOME_METHOD, ok = defaultValue.(string)
	case "DEFAULT_BECOME_USER":
		data.DEFAULT_BECOME_USER, ok = defaultValue.(string)
	case "DEFAULT_CACHE_PLUGIN_PATH":
		data.DEFAULT_CACHE_PLUGIN_PATH, ok = defaultValue.(string)
	case "DEFAULT_CALLBACK_PLUGIN_PATH":
		data.DEFAULT_CALLBACK_PLUGIN_PATH, ok = defaultValue.(string)
	case "DEFAULT_CLICONF_PLUGIN_PATH":
		data.DEFAULT_CLICONF_PLUGIN_PATH, ok = defaultValue.(string)
	case "DEFAULT_CONNECTION_PLUGIN_PATH":
		data.DEFAULT_CONNECTION_PLUGIN_PATH, ok = defaultValue.(string)
	case "DEFAULT_DEBUG":
		data.DEFAULT_DEBUG, ok = defaultValue.(bool)
	case "DEFAULT_EXECUTABLE":
		data.DEFAULT_EXECUTABLE, ok = defaultValue.(string)
	case "DEFAULT_FACT_PATH":
		data.DEFAULT_FACT_PATH, ok = defaultValue.(string)
	case "DEFAULT_FILTER_PLUGIN_PATH":
		data.DEFAULT_FILTER_PLUGIN_PATH, ok = defaultValue.(string)
	case "DEFAULT_FORCE_HANDLERS":
		data.DEFAULT_FORCE_HANDLERS, ok = defaultValue.(bool)
	case "DEFAULT_FORKS":
		data.DEFAULT_FORKS, ok = defaultValue.(int)
	case "DEFAULT_GATHERING":
		data.DEFAULT_GATHERING, ok = defaultValue.(string)
	case "DEFAULT_GATHER_SUBSET":
		switch v := defaultValue.(type) {
		case []string:
			data.DEFAULT_GATHER_SUBSET = v
		case []interface{}:
			data.DEFAULT_GATHER_SUBSET = []string{}
			for _, value := range v {
				switch value.(type) {
				case string:
					data.DEFAULT_GATHER_SUBSET = append(data.DEFAULT_GATHER_SUBSET, value.(string))
				default:
					ok = false
					break
				}
			}
		case string:
			data.DEFAULT_GATHER_SUBSET = strings.Split(v, ", ")
		default:
			ok = false
		}

	case "DEFAULT_GATHER_TIMEOUT":
		data.DEFAULT_GATHER_TIMEOUT, ok = defaultValue.(int)
	case "DEFAULT_HASH_BEHAVIOUR":
		data.DEFAULT_HASH_BEHAVIOUR, ok = defaultValue.(string)
	case "DEFAULT_HOST_LIST":
		data.DEFAULT_HOST_LIST, ok = defaultValue.(string)
	case "DEFAULT_HTTPAPI_PLUGIN_PATH":
		data.DEFAULT_HTTPAPI_PLUGIN_PATH, ok = defaultValue.(string)
	case "DEFAULT_INTERNAL_POLL_INTERVAL":
		data.DEFAULT_INTERNAL_POLL_INTERVAL, ok = defaultValue.(float64)
	case "DEFAULT_INVENTORY_PLUGIN_PATH":
		data.DEFAULT_INVENTORY_PLUGIN_PATH, ok = defaultValue.(string)
	case "DEFAULT_JINJA2_EXTENSIONS":
		switch v := defaultValue.(type) {
		case []string:
			data.DEFAULT_JINJA2_EXTENSIONS = v
		case []interface{}:
			data.DEFAULT_JINJA2_EXTENSIONS = []string{}
			for _, value := range v {
				switch value.(type) {
				case string:
					data.DEFAULT_JINJA2_EXTENSIONS = append(data.DEFAULT_JINJA2_EXTENSIONS, value.(string))
				default:
					ok = false
					break
				}
			}
		case string:
			data.DEFAULT_JINJA2_EXTENSIONS = strings.Split(v, ", ")
		default:
			ok = false
		}

	case "DEFAULT_JINJA2_NATIVE":
		data.DEFAULT_JINJA2_NATIVE, ok = defaultValue.(bool)
	case "DEFAULT_KEEP_REMOTE_FILES":
		data.DEFAULT_KEEP_REMOTE_FILES, ok = defaultValue.(bool)
	case "DEFAULT_LIBVIRT_LXC_NOSECLABEL":
		data.DEFAULT_LIBVIRT_LXC_NOSECLABEL, ok = defaultValue.(bool)
	case "DEFAULT_LOAD_CALLBACK_PLUGINS":
		data.DEFAULT_LOAD_CALLBACK_PLUGINS, ok = defaultValue.(bool)
	case "DEFAULT_LOCAL_TMP":
		data.DEFAULT_LOCAL_TMP, ok = defaultValue.(string)
	case "DEFAULT_LOG_FILTER":
		switch v := defaultValue.(type) {
		case []string:
			data.DEFAULT_LOG_FILTER = v
		case []interface{}:
			data.DEFAULT_LOG_FILTER = []string{}
			for _, value := range v {
				switch value.(type) {
				case string:
					data.DEFAULT_LOG_FILTER = append(data.DEFAULT_LOG_FILTER, value.(string))
				default:
					ok = false
					break
				}
			}
		case string:
			data.DEFAULT_LOG_FILTER = strings.Split(v, ", ")
		default:
			ok = false
		}

	case "DEFAULT_LOG_PATH":
		data.DEFAULT_LOG_PATH, ok = defaultValue.(string)
	case "DEFAULT_LOOKUP_PLUGIN_PATH":
		data.DEFAULT_LOOKUP_PLUGIN_PATH, ok = defaultValue.(string)
	case "DEFAULT_MANAGED_STR":
		data.DEFAULT_MANAGED_STR, ok = defaultValue.(string)
	case "DEFAULT_MODULE_ARGS":
		data.DEFAULT_MODULE_ARGS, ok = defaultValue.(string)
	case "DEFAULT_MODULE_COMPRESSION":
		data.DEFAULT_MODULE_COMPRESSION, ok = defaultValue.(string)
	case "DEFAULT_MODULE_NAME":
		data.DEFAULT_MODULE_NAME, ok = defaultValue.(string)
	case "DEFAULT_MODULE_PATH":
		data.DEFAULT_MODULE_PATH, ok = defaultValue.(string)
	case "DEFAULT_MODULE_UTILS_PATH":
		data.DEFAULT_MODULE_UTILS_PATH, ok = defaultValue.(string)
	case "DEFAULT_NETCONF_PLUGIN_PATH":
		data.DEFAULT_NETCONF_PLUGIN_PATH, ok = defaultValue.(string)
	case "DEFAULT_NO_LOG":
		data.DEFAULT_NO_LOG, ok = defaultValue.(bool)
	case "DEFAULT_NO_TARGET_SYSLOG":
		data.DEFAULT_NO_TARGET_SYSLOG, ok = defaultValue.(bool)
	case "DEFAULT_NULL_REPRESENTATION":
		data.DEFAULT_NULL_REPRESENTATION, ok = defaultValue.(string)
	case "DEFAULT_POLL_INTERVAL":
		data.DEFAULT_POLL_INTERVAL, ok = defaultValue.(int)
	case "DEFAULT_PRIVATE_KEY_FILE":
		data.DEFAULT_PRIVATE_KEY_FILE, ok = defaultValue.(string)
	case "DEFAULT_PRIVATE_ROLE_VARS":
		data.DEFAULT_PRIVATE_ROLE_VARS, ok = defaultValue.(bool)
	case "DEFAULT_REMOTE_PORT":
		data.DEFAULT_REMOTE_PORT, ok = defaultValue.(int)
	case "DEFAULT_REMOTE_USER":
		data.DEFAULT_REMOTE_USER, ok = defaultValue.(string)
	case "DEFAULT_ROLES_PATH":
		data.DEFAULT_ROLES_PATH, ok = defaultValue.(string)
	case "DEFAULT_SELINUX_SPECIAL_FS":
		switch v := defaultValue.(type) {
		case []string:
			data.DEFAULT_SELINUX_SPECIAL_FS = v
		case []interface{}:
			data.DEFAULT_SELINUX_SPECIAL_FS = []string{}
			for _, value := range v {
				switch value.(type) {
				case string:
					data.DEFAULT_SELINUX_SPECIAL_FS = append(data.DEFAULT_SELINUX_SPECIAL_FS, value.(string))
				default:
					ok = false
					break
				}
			}
		case string:
			data.DEFAULT_SELINUX_SPECIAL_FS = strings.Split(v, ", ")
		default:
			ok = false
		}

	case "DEFAULT_STDOUT_CALLBACK":
		data.DEFAULT_STDOUT_CALLBACK, ok = defaultValue.(string)
	case "DEFAULT_STRATEGY":
		data.DEFAULT_STRATEGY, ok = defaultValue.(string)
	case "DEFAULT_STRATEGY_PLUGIN_PATH":
		data.DEFAULT_STRATEGY_PLUGIN_PATH, ok = defaultValue.(string)
	case "DEFAULT_SU":
		data.DEFAULT_SU, ok = defaultValue.(bool)
	case "DEFAULT_SYSLOG_FACILITY":
		data.DEFAULT_SYSLOG_FACILITY, ok = defaultValue.(string)
	case "DEFAULT_TERMINAL_PLUGIN_PATH":
		data.DEFAULT_TERMINAL_PLUGIN_PATH, ok = defaultValue.(string)
	case "DEFAULT_TEST_PLUGIN_PATH":
		data.DEFAULT_TEST_PLUGIN_PATH, ok = defaultValue.(string)
	case "DEFAULT_TIMEOUT":
		data.DEFAULT_TIMEOUT, ok = defaultValue.(int)
	case "DEFAULT_TRANSPORT":
		data.DEFAULT_TRANSPORT, ok = defaultValue.(string)
	case "DEFAULT_UNDEFINED_VAR_BEHAVIOR":
		data.DEFAULT_UNDEFINED_VAR_BEHAVIOR, ok = defaultValue.(bool)
	case "DEFAULT_VARS_PLUGIN_PATH":
		data.DEFAULT_VARS_PLUGIN_PATH, ok = defaultValue.(string)
	case "DEFAULT_VAULT_ENCRYPT_IDENTITY":
		data.DEFAULT_VAULT_ENCRYPT_IDENTITY, ok = defaultValue.(string)
	case "DEFAULT_VAULT_IDENTITY":
		data.DEFAULT_VAULT_IDENTITY, ok = defaultValue.(string)
	case "DEFAULT_VAULT_IDENTITY_LIST":
		switch v := defaultValue.(type) {
		case []string:
			data.DEFAULT_VAULT_IDENTITY_LIST = v
		case []interface{}:
			data.DEFAULT_VAULT_IDENTITY_LIST = []string{}
			for _, value := range v {
				switch value.(type) {
				case string:
					data.DEFAULT_VAULT_IDENTITY_LIST = append(data.DEFAULT_VAULT_IDENTITY_LIST, value.(string))
				default:
					ok = false
					break
				}
			}
		case string:
			data.DEFAULT_VAULT_IDENTITY_LIST = strings.Split(v, ", ")
		default:
			ok = false
		}

	case "DEFAULT_VAULT_ID_MATCH":
		data.DEFAULT_VAULT_ID_MATCH, ok = defaultValue.(bool)
	case "DEFAULT_VAULT_PASSWORD_FILE":
		data.DEFAULT_VAULT_PASSWORD_FILE, ok = defaultValue.(string)
	case "DEFAULT_VERBOSITY":
		data.DEFAULT_VERBOSITY, ok = defaultValue.(int)
	case "DEPRECATION_WARNINGS":
		data.DEPRECATION_WARNINGS, ok = defaultValue.(bool)
	case "DEVEL_WARNING":
		data.DEVEL_WARNING, ok = defaultValue.(bool)
	case "DIFF_ALWAYS":
		data.DIFF_ALWAYS, ok = defaultValue.(bool)
	case "DIFF_CONTEXT":
		data.DIFF_CONTEXT, ok = defaultValue.(int)
	case "DISPLAY_ARGS_TO_STDOUT":
		data.DISPLAY_ARGS_TO_STDOUT, ok = defaultValue.(bool)
	case "DISPLAY_SKIPPED_HOSTS":
		data.DISPLAY_SKIPPED_HOSTS, ok = defaultValue.(bool)
	case "DOCSITE_ROOT_URL":
		data.DOCSITE_ROOT_URL, ok = defaultValue.(string)
	case "DOC_FRAGMENT_PLUGIN_PATH":
		data.DOC_FRAGMENT_PLUGIN_PATH, ok = defaultValue.(string)
	case "DUPLICATE_YAML_DICT_KEY":
		data.DUPLICATE_YAML_DICT_KEY, ok = defaultValue.(string)
	case "ENABLE_TASK_DEBUGGER":
		data.ENABLE_TASK_DEBUGGER, ok = defaultValue.(bool)
	case "ERROR_ON_MISSING_HANDLER":
		data.ERROR_ON_MISSING_HANDLER, ok = defaultValue.(bool)
	case "FACTS_MODULES":
		switch v := defaultValue.(type) {
		case []string:
			data.FACTS_MODULES = v
		case []interface{}:
			data.FACTS_MODULES = []string{}
			for _, value := range v {
				switch value.(type) {
				case string:
					data.FACTS_MODULES = append(data.FACTS_MODULES, value.(string))
				default:
					ok = false
					break
				}
			}
		case string:
			data.FACTS_MODULES = strings.Split(v, ", ")
		default:
			ok = false
		}

	case "GALAXY_CACHE_DIR":
		data.GALAXY_CACHE_DIR, ok = defaultValue.(string)
	case "GALAXY_COLLECTION_SKELETON":
		data.GALAXY_COLLECTION_SKELETON, ok = defaultValue.(string)
	case "GALAXY_COLLECTION_SKELETON_IGNORE":
		switch v := defaultValue.(type) {
		case []string:
			data.GALAXY_COLLECTION_SKELETON_IGNORE = v
		case []interface{}:
			data.GALAXY_COLLECTION_SKELETON_IGNORE = []string{}
			for _, value := range v {
				switch value.(type) {
				case string:
					data.GALAXY_COLLECTION_SKELETON_IGNORE = append(data.GALAXY_COLLECTION_SKELETON_IGNORE, value.(string))
				default:
					ok = false
					break
				}
			}
		case string:
			data.GALAXY_COLLECTION_SKELETON_IGNORE = strings.Split(v, ", ")
		default:
			ok = false
		}

	case "GALAXY_DISABLE_GPG_VERIFY":
		data.GALAXY_DISABLE_GPG_VERIFY, ok = defaultValue.(bool)
	case "GALAXY_DISPLAY_PROGRESS":
		data.GALAXY_DISPLAY_PROGRESS, ok = defaultValue.(bool)
	case "GALAXY_GPG_KEYRING":
		data.GALAXY_GPG_KEYRING, ok = defaultValue.(string)
	case "GALAXY_IGNORE_CERTS":
		data.GALAXY_IGNORE_CERTS, ok = defaultValue.(bool)
	case "GALAXY_IGNORE_INVALID_SIGNATURE_STATUS_CODES":
		switch v := defaultValue.(type) {
		case []string:
			data.GALAXY_IGNORE_INVALID_SIGNATURE_STATUS_CODES = v
		case []interface{}:
			data.GALAXY_IGNORE_INVALID_SIGNATURE_STATUS_CODES = []string{}
			for _, value := range v {
				switch value.(type) {
				case string:
					data.GALAXY_IGNORE_INVALID_SIGNATURE_STATUS_CODES = append(data.GALAXY_IGNORE_INVALID_SIGNATURE_STATUS_CODES, value.(string))
				default:
					ok = false
					break
				}
			}
		case string:
			data.GALAXY_IGNORE_INVALID_SIGNATURE_STATUS_CODES = strings.Split(v, ", ")
		default:
			ok = false
		}

	case "GALAXY_ROLE_SKELETON":
		data.GALAXY_ROLE_SKELETON, ok = defaultValue.(string)
	case "GALAXY_ROLE_SKELETON_IGNORE":
		switch v := defaultValue.(type) {
		case []string:
			data.GALAXY_ROLE_SKELETON_IGNORE = v
		case []interface{}:
			data.GALAXY_ROLE_SKELETON_IGNORE = []string{}
			for _, value := range v {
				switch value.(type) {
				case string:
					data.GALAXY_ROLE_SKELETON_IGNORE = append(data.GALAXY_ROLE_SKELETON_IGNORE, value.(string))
				default:
					ok = false
					break
				}
			}
		case string:
			data.GALAXY_ROLE_SKELETON_IGNORE = strings.Split(v, ", ")
		default:
			ok = false
		}

	case "GALAXY_SERVER":
		data.GALAXY_SERVER, ok = defaultValue.(string)
	case "GALAXY_SERVER_LIST":
		switch v := defaultValue.(type) {
		case []string:
			data.GALAXY_SERVER_LIST = v
		case []interface{}:
			data.GALAXY_SERVER_LIST = []string{}
			for _, value := range v {
				switch value.(type) {
				case string:
					data.GALAXY_SERVER_LIST = append(data.GALAXY_SERVER_LIST, value.(string))
				default:
					ok = false
					break
				}
			}
		case string:
			data.GALAXY_SERVER_LIST = strings.Split(v, ", ")
		default:
			ok = false
		}

	case "GALAXY_TOKEN_PATH":
		data.GALAXY_TOKEN_PATH, ok = defaultValue.(string)
	case "HOST_KEY_CHECKING":
		data.HOST_KEY_CHECKING, ok = defaultValue.(bool)
	case "HOST_PATTERN_MISMATCH":
		data.HOST_PATTERN_MISMATCH, ok = defaultValue.(string)
	case "INJECT_FACTS_AS_VARS":
		data.INJECT_FACTS_AS_VARS, ok = defaultValue.(bool)
	case "INTERPRETER_PYTHON":
		data.INTERPRETER_PYTHON, ok = defaultValue.(string)
	case "INTERPRETER_PYTHON_FALLBACK":
		switch v := defaultValue.(type) {
		case []string:
			data.INTERPRETER_PYTHON_FALLBACK = v
		case []interface{}:
			data.INTERPRETER_PYTHON_FALLBACK = []string{}
			for _, value := range v {
				switch value.(type) {
				case string:
					data.INTERPRETER_PYTHON_FALLBACK = append(data.INTERPRETER_PYTHON_FALLBACK, value.(string))
				default:
					ok = false
					break
				}
			}
		case string:
			data.INTERPRETER_PYTHON_FALLBACK = strings.Split(v, ", ")
		default:
			ok = false
		}

	case "INVALID_TASK_ATTRIBUTE_FAILED":
		data.INVALID_TASK_ATTRIBUTE_FAILED, ok = defaultValue.(bool)
	case "INVENTORY_ANY_UNPARSED_IS_FAILED":
		data.INVENTORY_ANY_UNPARSED_IS_FAILED, ok = defaultValue.(bool)
	case "INVENTORY_CACHE_ENABLED":
		data.INVENTORY_CACHE_ENABLED, ok = defaultValue.(bool)
	case "INVENTORY_CACHE_PLUGIN":
		data.INVENTORY_CACHE_PLUGIN, ok = defaultValue.(string)
	case "INVENTORY_CACHE_PLUGIN_CONNECTION":
		data.INVENTORY_CACHE_PLUGIN_CONNECTION, ok = defaultValue.(string)
	case "INVENTORY_CACHE_PLUGIN_PREFIX":
		data.INVENTORY_CACHE_PLUGIN_PREFIX, ok = defaultValue.(string)
	case "INVENTORY_CACHE_TIMEOUT":
		data.INVENTORY_CACHE_TIMEOUT, ok = defaultValue.(int)
	case "INVENTORY_ENABLED":
		switch v := defaultValue.(type) {
		case []string:
			data.INVENTORY_ENABLED = v
		case []interface{}:
			data.INVENTORY_ENABLED = []string{}
			for _, value := range v {
				switch value.(type) {
				case string:
					data.INVENTORY_ENABLED = append(data.INVENTORY_ENABLED, value.(string))
				default:
					ok = false
					break
				}
			}
		case string:
			data.INVENTORY_ENABLED = strings.Split(v, ", ")
		default:
			ok = false
		}

	case "INVENTORY_EXPORT":
		data.INVENTORY_EXPORT, ok = defaultValue.(bool)
	case "INVENTORY_IGNORE_PATTERNS":
		switch v := defaultValue.(type) {
		case []string:
			data.INVENTORY_IGNORE_PATTERNS = v
		case []interface{}:
			data.INVENTORY_IGNORE_PATTERNS = []string{}
			for _, value := range v {
				switch value.(type) {
				case string:
					data.INVENTORY_IGNORE_PATTERNS = append(data.INVENTORY_IGNORE_PATTERNS, value.(string))
				default:
					ok = false
					break
				}
			}
		case string:
			data.INVENTORY_IGNORE_PATTERNS = strings.Split(v, ", ")
		default:
			ok = false
		}

	case "INVENTORY_UNPARSED_IS_FAILED":
		data.INVENTORY_UNPARSED_IS_FAILED, ok = defaultValue.(bool)
	case "INVENTORY_UNPARSED_WARNING":
		data.INVENTORY_UNPARSED_WARNING, ok = defaultValue.(bool)
	case "JINJA2_NATIVE_WARNING":
		data.JINJA2_NATIVE_WARNING, ok = defaultValue.(bool)
	case "LOCALHOST_WARNING":
		data.LOCALHOST_WARNING, ok = defaultValue.(bool)
	case "MAX_FILE_SIZE_FOR_DIFF":
		data.MAX_FILE_SIZE_FOR_DIFF, ok = defaultValue.(int)
	case "NETCONF_SSH_CONFIG":
		data.NETCONF_SSH_CONFIG, ok = defaultValue.(string)
	case "NETWORK_GROUP_MODULES":
		switch v := defaultValue.(type) {
		case []string:
			data.NETWORK_GROUP_MODULES = v
		case []interface{}:
			data.NETWORK_GROUP_MODULES = []string{}
			for _, value := range v {
				switch value.(type) {
				case string:
					data.NETWORK_GROUP_MODULES = append(data.NETWORK_GROUP_MODULES, value.(string))
				default:
					ok = false
					break
				}
			}
		case string:
			data.NETWORK_GROUP_MODULES = strings.Split(v, ", ")
		default:
			ok = false
		}

	case "OLD_PLUGIN_CACHE_CLEARING":
		data.OLD_PLUGIN_CACHE_CLEARING, ok = defaultValue.(bool)
	case "PARAMIKO_HOST_KEY_AUTO_ADD":
		data.PARAMIKO_HOST_KEY_AUTO_ADD, ok = defaultValue.(bool)
	case "PARAMIKO_LOOK_FOR_KEYS":
		data.PARAMIKO_LOOK_FOR_KEYS, ok = defaultValue.(bool)
	case "PERSISTENT_COMMAND_TIMEOUT":
		data.PERSISTENT_COMMAND_TIMEOUT, ok = defaultValue.(int)
	case "PERSISTENT_CONNECT_RETRY_TIMEOUT":
		data.PERSISTENT_CONNECT_RETRY_TIMEOUT, ok = defaultValue.(int)
	case "PERSISTENT_CONNECT_TIMEOUT":
		data.PERSISTENT_CONNECT_TIMEOUT, ok = defaultValue.(int)
	case "PERSISTENT_CONTROL_PATH_DIR":
		data.PERSISTENT_CONTROL_PATH_DIR, ok = defaultValue.(string)
	case "PLAYBOOK_DIR":
		data.PLAYBOOK_DIR, ok = defaultValue.(string)
	case "PLAYBOOK_VARS_ROOT":
		data.PLAYBOOK_VARS_ROOT, ok = defaultValue.(string)
	case "PYTHON_MODULE_RLIMIT_NOFILE":
		data.PYTHON_MODULE_RLIMIT_NOFILE, ok = defaultValue.(int)
	case "RETRY_FILES_ENABLED":
		data.RETRY_FILES_ENABLED, ok = defaultValue.(bool)
	case "RETRY_FILES_SAVE_PATH":
		data.RETRY_FILES_SAVE_PATH, ok = defaultValue.(string)
	case "RUN_VARS_PLUGINS":
		data.RUN_VARS_PLUGINS, ok = defaultValue.(string)
	case "SHOW_CUSTOM_STATS":
		data.SHOW_CUSTOM_STATS, ok = defaultValue.(bool)
	case "STRING_CONVERSION_ACTION":
		data.STRING_CONVERSION_ACTION, ok = defaultValue.(string)
	case "STRING_TYPE_FILTERS":
		switch v := defaultValue.(type) {
		case []string:
			data.STRING_TYPE_FILTERS = v
		case []interface{}:
			data.STRING_TYPE_FILTERS = []string{}
			for _, value := range v {
				switch value.(type) {
				case string:
					data.STRING_TYPE_FILTERS = append(data.STRING_TYPE_FILTERS, value.(string))
				default:
					ok = false
					break
				}
			}
		case string:
			data.STRING_TYPE_FILTERS = strings.Split(v, ", ")
		default:
			ok = false
		}

	case "SYSTEM_WARNINGS":
		data.SYSTEM_WARNINGS, ok = defaultValue.(bool)
	case "TAGS_RUN":
		switch v := defaultValue.(type) {
		case []string:
			data.TAGS_RUN = v
		case []interface{}:
			data.TAGS_RUN = []string{}
			for _, value := range v {
				switch value.(type) {
				case string:
					data.TAGS_RUN = append(data.TAGS_RUN, value.(string))
				default:
					ok = false
					break
				}
			}
		case string:
			data.TAGS_RUN = strings.Split(v, ", ")
		default:
			ok = false
		}

	case "TAGS_SKIP":
		switch v := defaultValue.(type) {
		case []string:
			data.TAGS_SKIP = v
		case []interface{}:
			data.TAGS_SKIP = []string{}
			for _, value := range v {
				switch value.(type) {
				case string:
					data.TAGS_SKIP = append(data.TAGS_SKIP, value.(string))
				default:
					ok = false
					break
				}
			}
		case string:
			data.TAGS_SKIP = strings.Split(v, ", ")
		default:
			ok = false
		}

	case "TASK_DEBUGGER_IGNORE_ERRORS":
		data.TASK_DEBUGGER_IGNORE_ERRORS, ok = defaultValue.(bool)
	case "TASK_TIMEOUT":
		data.TASK_TIMEOUT, ok = defaultValue.(int)
	case "TRANSFORM_INVALID_GROUP_CHARS":
		data.TRANSFORM_INVALID_GROUP_CHARS, ok = defaultValue.(string)
	case "USE_PERSISTENT_CONNECTIONS":
		data.USE_PERSISTENT_CONNECTIONS, ok = defaultValue.(bool)
	case "VALIDATE_ACTION_GROUP_METADATA":
		data.VALIDATE_ACTION_GROUP_METADATA, ok = defaultValue.(bool)
	case "VARIABLE_PLUGINS_ENABLED":
		switch v := defaultValue.(type) {
		case []string:
			data.VARIABLE_PLUGINS_ENABLED = v
		case []interface{}:
			data.VARIABLE_PLUGINS_ENABLED = []string{}
			for _, value := range v {
				switch value.(type) {
				case string:
					data.VARIABLE_PLUGINS_ENABLED = append(data.VARIABLE_PLUGINS_ENABLED, value.(string))
				default:
					ok = false
					break
				}
			}
		case string:
			data.VARIABLE_PLUGINS_ENABLED = strings.Split(v, ", ")
		default:
			ok = false
		}

	case "VARIABLE_PRECEDENCE":
		switch v := defaultValue.(type) {
		case []string:
			data.VARIABLE_PRECEDENCE = v
		case []interface{}:
			data.VARIABLE_PRECEDENCE = []string{}
			for _, value := range v {
				switch value.(type) {
				case string:
					data.VARIABLE_PRECEDENCE = append(data.VARIABLE_PRECEDENCE, value.(string))
				default:
					ok = false
					break
				}
			}
		case string:
			data.VARIABLE_PRECEDENCE = strings.Split(v, ", ")
		default:
			ok = false
		}

	case "VERBOSE_TO_STDERR":
		data.VERBOSE_TO_STDERR, ok = defaultValue.(bool)
	case "WIN_ASYNC_STARTUP_TIMEOUT":
		data.WIN_ASYNC_STARTUP_TIMEOUT, ok = defaultValue.(int)
	case "WORKER_SHUTDOWN_POLL_COUNT":
		data.WORKER_SHUTDOWN_POLL_COUNT, ok = defaultValue.(int)
	case "WORKER_SHUTDOWN_POLL_DELAY":
		data.WORKER_SHUTDOWN_POLL_DELAY, ok = defaultValue.(float64)
	case "YAML_FILENAME_EXTENSIONS":
		switch v := defaultValue.(type) {
		case []string:
			data.YAML_FILENAME_EXTENSIONS = v
		case []interface{}:
			data.YAML_FILENAME_EXTENSIONS = []string{}
			for _, value := range v {
				switch value.(type) {
				case string:
					data.YAML_FILENAME_EXTENSIONS = append(data.YAML_FILENAME_EXTENSIONS, value.(string))
				default:
					ok = false
					break
				}
			}
		case string:
			data.YAML_FILENAME_EXTENSIONS = strings.Split(v, ", ")
		default:
			ok = false
		}

	case "_COLOR_DEFAULTS":
		switch v := defaultValue.(type) {
		case []string:
			data._COLOR_DEFAULTS = v
		case []interface{}:
			data._COLOR_DEFAULTS = []string{}
			for _, value := range v {
				switch value.(type) {
				case string:
					data._COLOR_DEFAULTS = append(data._COLOR_DEFAULTS, value.(string))
				default:
					ok = false
					break
				}
			}
		case string:
			data._COLOR_DEFAULTS = strings.Split(v, ", ")
		default:
			ok = false
		}

	case "INTERPRETER_PYTHON_DISTRO_MAP":
		return nil // Ignored field.
	case "INVENTORY_IGNORE_EXTS":
		return nil // Ignored field.
	case "MODULE_IGNORE_EXTS":
		return nil // Ignored field.
	case "PLUGIN_FILTERS_CFG":
		return nil // Ignored field.
	case "CONNECTION_FACTS_MODULES":
		return nil // Ignored field.
	case "ANSIBLE_COW_SELECTION":
		return nil // Ignored field.
	case "GALAXY_REQUIRED_VALID_SIGNATURE_COUNT":
		return nil // Ignored field.

	default:
		return fmt.Errorf("unrecognized config key: %s", key)
	}

	if !ok {
		return fmt.Errorf("unable to parse config field: %s, value: %s", key, defaultValue)
	}
	return nil
}

func (d *ConfigData) updateFieldFromIni(section string, key *ini.Key) error {
	var err error
	switch section {
	case "defaults":
		switch key.Name() {
		case "action_warnings":
			d.ACTION_WARNINGS, err = key.Bool()
		case "cow_whitelist":
			d.ANSIBLE_COW_ACCEPTLIST = key.Strings(",")
		case "cowsay_enabled_stencils":
			d.ANSIBLE_COW_ACCEPTLIST = key.Strings(",")
		case "cowpath":
			d.ANSIBLE_COW_PATH = key.String()
		case "cow_selection":
		// Ignored field.
		case "force_color":
			d.ANSIBLE_FORCE_COLOR, err = key.Bool()
		case "home":
			d.ANSIBLE_HOME = key.String()
		case "nocolor":
			d.ANSIBLE_NOCOLOR, err = key.Bool()
		case "nocows":
			d.ANSIBLE_NOCOWS, err = key.Bool()
		case "pipelining":
			d.ANSIBLE_PIPELINING, err = key.Bool()
		case "any_errors_fatal":
			d.ANY_ERRORS_FATAL, err = key.Bool()
		case "become_password_file":
			d.BECOME_PASSWORD_FILE = key.String()
		case "become_plugins":
			d.BECOME_PLUGIN_PATH = key.String()
		case "fact_caching":
			d.CACHE_PLUGIN = key.String()
		case "fact_caching_connection":
			d.CACHE_PLUGIN_CONNECTION = key.String()
		case "fact_caching_prefix":
			d.CACHE_PLUGIN_PREFIX = key.String()
		case "fact_caching_timeout":
			d.CACHE_PLUGIN_TIMEOUT, err = key.Int()
		case "callback_whitelist":
			d.CALLBACKS_ENABLED = key.Strings(",")
		case "callbacks_enabled":
			d.CALLBACKS_ENABLED = key.Strings(",")
		case "collections_on_ansible_version_mismatch":
			d.COLLECTIONS_ON_ANSIBLE_VERSION_MISMATCH = key.String()
		case "collections_paths":
			d.COLLECTIONS_PATHS = key.String()
		case "collections_path":
			d.COLLECTIONS_PATHS = key.String()
		case "collections_scan_sys_path":
			d.COLLECTIONS_SCAN_SYS_PATH, err = key.Bool()
		case "connection_password_file":
			d.CONNECTION_PASSWORD_FILE = key.String()
		case "action_plugins":
			d.DEFAULT_ACTION_PLUGIN_PATH = key.String()
		case "allow_unsafe_lookups":
			d.DEFAULT_ALLOW_UNSAFE_LOOKUPS, err = key.Bool()
		case "ask_pass":
			d.DEFAULT_ASK_PASS, err = key.Bool()
		case "ask_vault_pass":
			d.DEFAULT_ASK_VAULT_PASS, err = key.Bool()
		case "cache_plugins":
			d.DEFAULT_CACHE_PLUGIN_PATH = key.String()
		case "callback_plugins":
			d.DEFAULT_CALLBACK_PLUGIN_PATH = key.String()
		case "cliconf_plugins":
			d.DEFAULT_CLICONF_PLUGIN_PATH = key.String()
		case "connection_plugins":
			d.DEFAULT_CONNECTION_PLUGIN_PATH = key.String()
		case "debug":
			d.DEFAULT_DEBUG, err = key.Bool()
		case "executable":
			d.DEFAULT_EXECUTABLE = key.String()
		case "fact_path":
			d.DEFAULT_FACT_PATH = key.String()
		case "filter_plugins":
			d.DEFAULT_FILTER_PLUGIN_PATH = key.String()
		case "force_handlers":
			d.DEFAULT_FORCE_HANDLERS, err = key.Bool()
		case "forks":
			d.DEFAULT_FORKS, err = key.Int()
		case "gathering":
			d.DEFAULT_GATHERING = key.String()
		case "gather_subset":
			d.DEFAULT_GATHER_SUBSET = key.Strings(",")
		case "gather_timeout":
			d.DEFAULT_GATHER_TIMEOUT, err = key.Int()
		case "hash_behaviour":
			d.DEFAULT_HASH_BEHAVIOUR = key.String()
		case "inventory":
			d.DEFAULT_HOST_LIST = key.String()
		case "httpapi_plugins":
			d.DEFAULT_HTTPAPI_PLUGIN_PATH = key.String()
		case "internal_poll_interval":
			d.DEFAULT_INTERNAL_POLL_INTERVAL, err = key.Float64()
		case "inventory_plugins":
			d.DEFAULT_INVENTORY_PLUGIN_PATH = key.String()
		case "jinja2_extensions":
			d.DEFAULT_JINJA2_EXTENSIONS = key.Strings(",")
		case "jinja2_native":
			d.DEFAULT_JINJA2_NATIVE, err = key.Bool()
		case "keep_remote_files":
			d.DEFAULT_KEEP_REMOTE_FILES, err = key.Bool()
		case "bin_ansible_callbacks":
			d.DEFAULT_LOAD_CALLBACK_PLUGINS, err = key.Bool()
		case "local_tmp":
			d.DEFAULT_LOCAL_TMP = key.String()
		case "log_filter":
			d.DEFAULT_LOG_FILTER = key.Strings(",")
		case "log_path":
			d.DEFAULT_LOG_PATH = key.String()
		case "lookup_plugins":
			d.DEFAULT_LOOKUP_PLUGIN_PATH = key.String()
		case "ansible_managed":
			d.DEFAULT_MANAGED_STR = key.String()
		case "module_args":
			d.DEFAULT_MODULE_ARGS = key.String()
		case "module_compression":
			d.DEFAULT_MODULE_COMPRESSION = key.String()
		case "module_name":
			d.DEFAULT_MODULE_NAME = key.String()
		case "library":
			d.DEFAULT_MODULE_PATH = key.String()
		case "module_utils":
			d.DEFAULT_MODULE_UTILS_PATH = key.String()
		case "netconf_plugins":
			d.DEFAULT_NETCONF_PLUGIN_PATH = key.String()
		case "no_log":
			d.DEFAULT_NO_LOG, err = key.Bool()
		case "no_target_syslog":
			d.DEFAULT_NO_TARGET_SYSLOG, err = key.Bool()
		case "null_representation":
			d.DEFAULT_NULL_REPRESENTATION = key.String()
		case "poll_interval":
			d.DEFAULT_POLL_INTERVAL, err = key.Int()
		case "private_key_file":
			d.DEFAULT_PRIVATE_KEY_FILE = key.String()
		case "private_role_vars":
			d.DEFAULT_PRIVATE_ROLE_VARS, err = key.Bool()
		case "remote_port":
			d.DEFAULT_REMOTE_PORT, err = key.Int()
		case "remote_user":
			d.DEFAULT_REMOTE_USER = key.String()
		case "roles_path":
			d.DEFAULT_ROLES_PATH = key.String()
		case "stdout_callback":
			d.DEFAULT_STDOUT_CALLBACK = key.String()
		case "strategy":
			d.DEFAULT_STRATEGY = key.String()
		case "strategy_plugins":
			d.DEFAULT_STRATEGY_PLUGIN_PATH = key.String()
		case "su":
			d.DEFAULT_SU, err = key.Bool()
		case "syslog_facility":
			d.DEFAULT_SYSLOG_FACILITY = key.String()
		case "terminal_plugins":
			d.DEFAULT_TERMINAL_PLUGIN_PATH = key.String()
		case "test_plugins":
			d.DEFAULT_TEST_PLUGIN_PATH = key.String()
		case "timeout":
			d.DEFAULT_TIMEOUT, err = key.Int()
		case "transport":
			d.DEFAULT_TRANSPORT = key.String()
		case "error_on_undefined_vars":
			d.DEFAULT_UNDEFINED_VAR_BEHAVIOR, err = key.Bool()
		case "vars_plugins":
			d.DEFAULT_VARS_PLUGIN_PATH = key.String()
		case "vault_encrypt_identity":
			d.DEFAULT_VAULT_ENCRYPT_IDENTITY = key.String()
		case "vault_identity":
			d.DEFAULT_VAULT_IDENTITY = key.String()
		case "vault_identity_list":
			d.DEFAULT_VAULT_IDENTITY_LIST = key.Strings(",")
		case "vault_id_match":
			d.DEFAULT_VAULT_ID_MATCH, err = key.Bool()
		case "vault_password_file":
			d.DEFAULT_VAULT_PASSWORD_FILE = key.String()
		case "verbosity":
			d.DEFAULT_VERBOSITY, err = key.Int()
		case "deprecation_warnings":
			d.DEPRECATION_WARNINGS, err = key.Bool()
		case "devel_warning":
			d.DEVEL_WARNING, err = key.Bool()
		case "display_args_to_stdout":
			d.DISPLAY_ARGS_TO_STDOUT, err = key.Bool()
		case "display_skipped_hosts":
			d.DISPLAY_SKIPPED_HOSTS, err = key.Bool()
		case "docsite_root_url":
			d.DOCSITE_ROOT_URL = key.String()
		case "doc_fragment_plugins":
			d.DOC_FRAGMENT_PLUGIN_PATH = key.String()
		case "duplicate_dict_key":
			d.DUPLICATE_YAML_DICT_KEY = key.String()
		case "enable_task_debugger":
			d.ENABLE_TASK_DEBUGGER, err = key.Bool()
		case "error_on_missing_handler":
			d.ERROR_ON_MISSING_HANDLER, err = key.Bool()
		case "facts_modules":
			d.FACTS_MODULES = key.Strings(",")
		case "host_key_checking":
			d.HOST_KEY_CHECKING, err = key.Bool()
		case "inject_facts_as_vars":
			d.INJECT_FACTS_AS_VARS, err = key.Bool()
		case "interpreter_python":
			d.INTERPRETER_PYTHON = key.String()
		case "invalid_task_attribute_failed":
			d.INVALID_TASK_ATTRIBUTE_FAILED, err = key.Bool()
		case "inventory_ignore_extensions":
		// Ignored field.
		case "inventory_ignore_patterns":
			d.INVENTORY_IGNORE_PATTERNS = key.Strings(",")
		case "jinja2_native_warning":
			d.JINJA2_NATIVE_WARNING, err = key.Bool()
		case "localhost_warning":
			d.LOCALHOST_WARNING, err = key.Bool()
		case "max_diff_size":
			d.MAX_FILE_SIZE_FOR_DIFF, err = key.Int()
		case "module_ignore_exts":
		// Ignored field.
		case "network_group_modules":
			d.NETWORK_GROUP_MODULES = key.Strings(",")
		case "old_plugin_cache_clear":
			d.OLD_PLUGIN_CACHE_CLEARING, err = key.Bool()
		case "playbook_dir":
			d.PLAYBOOK_DIR = key.String()
		case "playbook_vars_root":
			d.PLAYBOOK_VARS_ROOT = key.String()
		case "plugin_filters_cfg":
		// Ignored field.
		case "python_module_rlimit_nofile":
			d.PYTHON_MODULE_RLIMIT_NOFILE, err = key.Int()
		case "retry_files_enabled":
			d.RETRY_FILES_ENABLED, err = key.Bool()
		case "retry_files_save_path":
			d.RETRY_FILES_SAVE_PATH = key.String()
		case "run_vars_plugins":
			d.RUN_VARS_PLUGINS = key.String()
		case "show_custom_stats":
			d.SHOW_CUSTOM_STATS, err = key.Bool()
		case "string_conversion_action":
			d.STRING_CONVERSION_ACTION = key.String()
		case "system_warnings":
			d.SYSTEM_WARNINGS, err = key.Bool()
		case "task_debugger_ignore_errors":
			d.TASK_DEBUGGER_IGNORE_ERRORS, err = key.Bool()
		case "task_timeout":
			d.TASK_TIMEOUT, err = key.Int()
		case "force_valid_group_names":
			d.TRANSFORM_INVALID_GROUP_CHARS = key.String()
		case "use_persistent_connections":
			d.USE_PERSISTENT_CONNECTIONS, err = key.Bool()
		case "validate_action_group_metadata":
			d.VALIDATE_ACTION_GROUP_METADATA, err = key.Bool()
		case "vars_plugins_enabled":
			d.VARIABLE_PLUGINS_ENABLED = key.Strings(",")
		case "precedence":
			d.VARIABLE_PRECEDENCE = key.Strings(",")
		case "verbose_to_stderr":
			d.VERBOSE_TO_STDERR, err = key.Bool()
		case "win_async_startup_timeout":
			d.WIN_ASYNC_STARTUP_TIMEOUT, err = key.Int()
		case "yaml_valid_extensions":
			d.YAML_FILENAME_EXTENSIONS = key.Strings(",")
		default:
			return fmt.Errorf("unrecognized key %s in section %s", key.Name(), section)
		}
	case "privilege_escalation":
		switch key.Name() {
		case "agnostic_become_prompt":
			d.AGNOSTIC_BECOME_PROMPT, err = key.Bool()
		case "become_allow_same_user":
			d.BECOME_ALLOW_SAME_USER, err = key.Bool()
		case "become":
			d.DEFAULT_BECOME, err = key.Bool()
		case "become_ask_pass":
			d.DEFAULT_BECOME_ASK_PASS, err = key.Bool()
		case "become_exe":
			d.DEFAULT_BECOME_EXE = key.String()
		case "become_flags":
			d.DEFAULT_BECOME_FLAGS = key.String()
		case "become_method":
			d.DEFAULT_BECOME_METHOD = key.String()
		case "become_user":
			d.DEFAULT_BECOME_USER = key.String()
		default:
			return fmt.Errorf("unrecognized key %s in section %s", key.Name(), section)
		}
	case "persistent_connection":
		switch key.Name() {
		case "ansible_connection_path":
			d.ANSIBLE_CONNECTION_PATH = key.String()
		case "command_timeout":
			d.PERSISTENT_COMMAND_TIMEOUT, err = key.Int()
		case "connect_retry_timeout":
			d.PERSISTENT_CONNECT_RETRY_TIMEOUT, err = key.Int()
		case "connect_timeout":
			d.PERSISTENT_CONNECT_TIMEOUT, err = key.Int()
		case "control_path_dir":
			d.PERSISTENT_CONTROL_PATH_DIR = key.String()
		default:
			return fmt.Errorf("unrecognized key %s in section %s", key.Name(), section)
		}
	case "connection":
		switch key.Name() {
		case "pipelining":
			d.ANSIBLE_PIPELINING, err = key.Bool()
		default:
			return fmt.Errorf("unrecognized key %s in section %s", key.Name(), section)
		}
	case "colors":
		switch key.Name() {
		case "changed":
			d.COLOR_CHANGED = key.String()
		case "console_prompt":
			d.COLOR_CONSOLE_PROMPT = key.String()
		case "debug":
			d.COLOR_DEBUG = key.String()
		case "deprecate":
			d.COLOR_DEPRECATE = key.String()
		case "diff_add":
			d.COLOR_DIFF_ADD = key.String()
		case "diff_lines":
			d.COLOR_DIFF_LINES = key.String()
		case "diff_remove":
			d.COLOR_DIFF_REMOVE = key.String()
		case "error":
			d.COLOR_ERROR = key.String()
		case "highlight":
			d.COLOR_HIGHLIGHT = key.String()
		case "ok":
			d.COLOR_OK = key.String()
		case "skip":
			d.COLOR_SKIP = key.String()
		case "unreachable":
			d.COLOR_UNREACHABLE = key.String()
		case "verbose":
			d.COLOR_VERBOSE = key.String()
		case "warn":
			d.COLOR_WARN = key.String()
		default:
			return fmt.Errorf("unrecognized key %s in section %s", key.Name(), section)
		}
	case "selinux":
		switch key.Name() {
		case "libvirt_lxc_noseclabel":
			d.DEFAULT_LIBVIRT_LXC_NOSECLABEL, err = key.Bool()
		case "special_context_filesystems":
			d.DEFAULT_SELINUX_SPECIAL_FS = key.Strings(",")
		default:
			return fmt.Errorf("unrecognized key %s in section %s", key.Name(), section)
		}
	case "diff":
		switch key.Name() {
		case "always":
			d.DIFF_ALWAYS, err = key.Bool()
		case "context":
			d.DIFF_CONTEXT, err = key.Int()
		default:
			return fmt.Errorf("unrecognized key %s in section %s", key.Name(), section)
		}
	case "galaxy":
		switch key.Name() {
		case "cache_dir":
			d.GALAXY_CACHE_DIR = key.String()
		case "collection_skeleton":
			d.GALAXY_COLLECTION_SKELETON = key.String()
		case "collection_skeleton_ignore":
			d.GALAXY_COLLECTION_SKELETON_IGNORE = key.Strings(",")
		case "disable_gpg_verify":
			d.GALAXY_DISABLE_GPG_VERIFY, err = key.Bool()
		case "display_progress":
			d.GALAXY_DISPLAY_PROGRESS, err = key.Bool()
		case "gpg_keyring":
			d.GALAXY_GPG_KEYRING = key.String()
		case "ignore_certs":
			d.GALAXY_IGNORE_CERTS, err = key.Bool()
		case "ignore_signature_status_codes":
			d.GALAXY_IGNORE_INVALID_SIGNATURE_STATUS_CODES = key.Strings(",")
		case "required_valid_signature_count":
		// Ignored field.
		case "role_skeleton":
			d.GALAXY_ROLE_SKELETON = key.String()
		case "role_skeleton_ignore":
			d.GALAXY_ROLE_SKELETON_IGNORE = key.Strings(",")
		case "server":
			d.GALAXY_SERVER = key.String()
		case "server_list":
			d.GALAXY_SERVER_LIST = key.Strings(",")
		case "token_path":
			d.GALAXY_TOKEN_PATH = key.String()
		default:
			return fmt.Errorf("unrecognized key %s in section %s", key.Name(), section)
		}
	case "inventory":
		switch key.Name() {
		case "host_pattern_mismatch":
			d.HOST_PATTERN_MISMATCH = key.String()
		case "any_unparsed_is_failed":
			d.INVENTORY_ANY_UNPARSED_IS_FAILED, err = key.Bool()
		case "cache":
			d.INVENTORY_CACHE_ENABLED, err = key.Bool()
		case "cache_plugin":
			d.INVENTORY_CACHE_PLUGIN = key.String()
		case "cache_connection":
			d.INVENTORY_CACHE_PLUGIN_CONNECTION = key.String()
		case "cache_prefix":
			d.INVENTORY_CACHE_PLUGIN_PREFIX = key.String()
		case "cache_timeout":
			d.INVENTORY_CACHE_TIMEOUT, err = key.Int()
		case "enable_plugins":
			d.INVENTORY_ENABLED = key.Strings(",")
		case "export":
			d.INVENTORY_EXPORT, err = key.Bool()
		case "ignore_extensions":
		// Ignored field.
		case "ignore_patterns":
			d.INVENTORY_IGNORE_PATTERNS = key.Strings(",")
		case "unparsed_is_failed":
			d.INVENTORY_UNPARSED_IS_FAILED, err = key.Bool()
		case "inventory_unparsed_warning":
			d.INVENTORY_UNPARSED_WARNING, err = key.Bool()
		default:
			return fmt.Errorf("unrecognized key %s in section %s", key.Name(), section)
		}
	case "netconf_connection":
		switch key.Name() {
		case "ssh_config":
			d.NETCONF_SSH_CONFIG = key.String()
		default:
			return fmt.Errorf("unrecognized key %s in section %s", key.Name(), section)
		}
	case "paramiko_connection":
		switch key.Name() {
		case "host_key_auto_add":
			d.PARAMIKO_HOST_KEY_AUTO_ADD, err = key.Bool()
		case "look_for_keys":
			d.PARAMIKO_LOOK_FOR_KEYS, err = key.Bool()
		default:
			return fmt.Errorf("unrecognized key %s in section %s", key.Name(), section)
		}
	case "jinja2":
		switch key.Name() {
		case "dont_type_filters":
			d.STRING_TYPE_FILTERS = key.Strings(",")
		default:
			return fmt.Errorf("unrecognized key %s in section %s", key.Name(), section)
		}
	case "tags":
		switch key.Name() {
		case "run":
			d.TAGS_RUN = key.Strings(",")
		case "skip":
			d.TAGS_SKIP = key.Strings(",")
		default:
			return fmt.Errorf("unrecognized key %s in section %s", key.Name(), section)
		}
	default:
		return fmt.Errorf("unrecognized section %s", section)
	}

	return err
}
