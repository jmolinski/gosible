// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: remote/proto/gosible.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GosibleClientClient is the client API for GosibleClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GosibleClientClient interface {
	ExecuteModule(ctx context.Context, in *ExecuteModuleRequest, opts ...grpc.CallOption) (*ExecuteModuleReply, error)
}

type gosibleClientClient struct {
	cc grpc.ClientConnInterface
}

func NewGosibleClientClient(cc grpc.ClientConnInterface) GosibleClientClient {
	return &gosibleClientClient{cc}
}

func (c *gosibleClientClient) ExecuteModule(ctx context.Context, in *ExecuteModuleRequest, opts ...grpc.CallOption) (*ExecuteModuleReply, error) {
	out := new(ExecuteModuleReply)
	err := c.cc.Invoke(ctx, "/gosible.proto.GosibleClient/ExecuteModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GosibleClientServer is the server API for GosibleClient service.
// All implementations must embed UnimplementedGosibleClientServer
// for forward compatibility
type GosibleClientServer interface {
	ExecuteModule(context.Context, *ExecuteModuleRequest) (*ExecuteModuleReply, error)
	mustEmbedUnimplementedGosibleClientServer()
}

// UnimplementedGosibleClientServer must be embedded to have forward compatible implementations.
type UnimplementedGosibleClientServer struct {
}

func (UnimplementedGosibleClientServer) ExecuteModule(context.Context, *ExecuteModuleRequest) (*ExecuteModuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteModule not implemented")
}
func (UnimplementedGosibleClientServer) mustEmbedUnimplementedGosibleClientServer() {}

// UnsafeGosibleClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GosibleClientServer will
// result in compilation errors.
type UnsafeGosibleClientServer interface {
	mustEmbedUnimplementedGosibleClientServer()
}

func RegisterGosibleClientServer(s grpc.ServiceRegistrar, srv GosibleClientServer) {
	s.RegisterService(&GosibleClient_ServiceDesc, srv)
}

func _GosibleClient_ExecuteModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GosibleClientServer).ExecuteModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gosible.proto.GosibleClient/ExecuteModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GosibleClientServer).ExecuteModule(ctx, req.(*ExecuteModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GosibleClient_ServiceDesc is the grpc.ServiceDesc for GosibleClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GosibleClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gosible.proto.GosibleClient",
	HandlerType: (*GosibleClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteModule",
			Handler:    _GosibleClient_ExecuteModule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "remote/proto/gosible.proto",
}
